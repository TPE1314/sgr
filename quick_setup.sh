#!/bin/bash

# ü§ñ ÁîµÊä•Êú∫Âô®‰∫∫ÊäïÁ®øÁ≥ªÁªü - ‰∏ÄÈîÆÂÆâË£ÖËÑöÊú¨
# One-Click Installation Script for Telegram Bot Submission System
# ÁâàÊú¨: v2.1 (Â¢ûÂº∫Áâà‰∏ÄÈîÆÂÆâË£ÖÔºåÊîØÊåÅÊõ¥Â§öÂäüËÉΩÂíåÂπ≥Âè∞)
# 
# ÂäüËÉΩÁâπÊÄß:
# - Êô∫ËÉΩÁ≥ªÁªüÊ£ÄÊµãÂíåÁéØÂ¢ÉÈÖçÁΩÆ
# - Â§öÂπ≥Âè∞ÊîØÊåÅ (Ubuntu/CentOS/Debian/Arch)
# - Ëá™Âä®‰æùËµñÂÆâË£ÖÂíåÁâàÊú¨Ê£ÄÊü•
# - ‰∫§‰∫íÂºèÈÖçÁΩÆÂêëÂØº
# - Ëá™Âä®ÊµãËØïÂíåÈ™åËØÅ
# - Á≥ªÁªüÊúçÂä°ÈÖçÁΩÆ
# - ÂÆåÊï¥ÁöÑÈîôËØØÂ§ÑÁêÜÂíåÂõûÊªöÊú∫Âà∂

set -e

# ËÑöÊú¨ÁâàÊú¨Âíå‰ø°ÊÅØ
SCRIPT_VERSION="2.1"
SCRIPT_NAME="Telegram Bot System Installer"
MIN_PYTHON_VERSION="3.8"
REQUIRED_MEMORY_MB=512
REQUIRED_DISK_GB=1

# È¢úËâ≤ÂÆö‰πâ
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# ÂÖ®Â±ÄÂèòÈáè
INSTALL_DIR=""
BACKUP_DIR=""
PYTHON_CMD=""
PIP_CMD=""
PKG_MANAGER=""
DISTRO=""
DISTRO_VERSION=""
ARCH=""
INSTALL_LOG=""
ERROR_LOG=""

# Êó•ÂøóÂáΩÊï∞
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
    [[ -n "$INSTALL_LOG" ]] && echo "[INFO] $(date '+%Y-%m-%d %H:%M:%S') $1" >> "$INSTALL_LOG"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
    [[ -n "$INSTALL_LOG" ]] && echo "[SUCCESS] $(date '+%Y-%m-%d %H:%M:%S') $1" >> "$INSTALL_LOG"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
    [[ -n "$INSTALL_LOG" ]] && echo "[WARNING] $(date '+%Y-%m-%d %H:%M:%S') $1" >> "$INSTALL_LOG"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
    [[ -n "$ERROR_LOG" ]] && echo "[ERROR] $(date '+%Y-%m-%d %H:%M:%S') $1" >> "$ERROR_LOG"
    [[ -n "$INSTALL_LOG" ]] && echo "[ERROR] $(date '+%Y-%m-%d %H:%M:%S') $1" >> "$INSTALL_LOG"
}

log_header() {
    echo -e "${PURPLE}===================================================${NC}"
    echo -e "${WHITE}$1${NC}"
    echo -e "${PURPLE}===================================================${NC}"
    [[ -n "$INSTALL_LOG" ]] && echo "[HEADER] $(date '+%Y-%m-%d %H:%M:%S') $1" >> "$INSTALL_LOG"
}

log_step() {
    echo -e "${CYAN}‚è≥ $1${NC}"
    [[ -n "$INSTALL_LOG" ]] && echo "[STEP] $(date '+%Y-%m-%d %H:%M:%S') $1" >> "$INSTALL_LOG"
}

# ÈîôËØØÂ§ÑÁêÜÂíåÊ∏ÖÁêÜ
cleanup_on_error() {
    log_error "ÂÆâË£ÖËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØÔºåÊ≠£Âú®Ê∏ÖÁêÜ..."
    
    # ÂÅúÊ≠¢ÂèØËÉΩËøêË°åÁöÑËøõÁ®ã
    pkill -f "python.*bot\.py" 2>/dev/null || true
    
    # ÊÅ¢Â§çÂ§á‰ªΩÔºàÂ¶ÇÊûúÂ≠òÂú®Ôºâ
    if [[ -n "$BACKUP_DIR" && -d "$BACKUP_DIR" ]]; then
        log_info "ÊÅ¢Â§çÈÖçÁΩÆÊñá‰ª∂Â§á‰ªΩ..."
        [[ -f "$BACKUP_DIR/config.ini" ]] && cp "$BACKUP_DIR/config.ini" . 2>/dev/null || true
    fi
    
    # ÊòæÁ§∫ÈîôËØØÊó•Âøó‰ΩçÁΩÆ
    if [[ -n "$ERROR_LOG" && -f "$ERROR_LOG" ]]; then
        log_error "ËØ¶ÁªÜÈîôËØØ‰ø°ÊÅØËØ∑Êü•Áúã: $ERROR_LOG"
        echo -e "${YELLOW}ÊúÄËøëÁöÑÈîôËØØ:${NC}"
        tail -5 "$ERROR_LOG" 2>/dev/null || true
    fi
    
    log_error "ÂÆâË£ÖÂ§±Ë¥•„ÄÇÊÇ®ÂèØ‰ª•ÈáçÊñ∞ËøêË°åËÑöÊú¨ÊàñÊü•ÁúãÊó•ÂøóÊñá‰ª∂Ëé∑ÂèñÊõ¥Â§ö‰ø°ÊÅØ„ÄÇ"
    exit 1
}

# ËÆæÁΩÆÈîôËØØÈô∑Èò±
trap cleanup_on_error ERR

# ÂàùÂßãÂåñÁéØÂ¢É
init_environment() {
    # ËÆæÁΩÆÂÆâË£ÖÁõÆÂΩï
    INSTALL_DIR=$(pwd)
    BACKUP_DIR="$INSTALL_DIR/.backup_$(date +%Y%m%d_%H%M%S)"
    
    # ÂàõÂª∫Êó•ÂøóÁõÆÂΩï
    mkdir -p logs
    INSTALL_LOG="$INSTALL_DIR/logs/install_$(date +%Y%m%d_%H%M%S).log"
    ERROR_LOG="$INSTALL_DIR/logs/install_error_$(date +%Y%m%d_%H%M%S).log"
    
    # ËÆ∞ÂΩïÂÆâË£ÖÂºÄÂßã
    echo "=== Telegram Bot System Installation Started ===" > "$INSTALL_LOG"
    echo "Date: $(date)" >> "$INSTALL_LOG"
    echo "User: $(whoami)" >> "$INSTALL_LOG"
    echo "Directory: $INSTALL_DIR" >> "$INSTALL_LOG"
    echo "Script Version: $SCRIPT_VERSION" >> "$INSTALL_LOG"
    echo "=============================================" >> "$INSTALL_LOG"
    
    log_info "ÂàùÂßãÂåñÂÆâË£ÖÁéØÂ¢ÉÂÆåÊàê"
    log_info "ÂÆâË£ÖÊó•Âøó: $INSTALL_LOG"
}

# Ê£ÄÊü•ÊòØÂê¶‰∏∫rootÁî®Êà∑
check_root() {
    if [[ $EUID -eq 0 ]]; then
        log_warning "Ê£ÄÊµãÂà∞ÊÇ®Ê≠£Âú®‰ΩøÁî®rootÁî®Êà∑ËøêË°åËÑöÊú¨"
        log_warning "Âª∫ËÆÆÂàõÂª∫‰∏Ä‰∏™ÊôÆÈÄöÁî®Êà∑Êù•ËøêË°åÊú∫Âô®‰∫∫"
        echo -e "${YELLOW}ÁªßÁª≠‰ΩøÁî®rootÁî®Êà∑ÂèØËÉΩÂ≠òÂú®ÂÆâÂÖ®È£éÈô©${NC}"
        read -p "ÊòØÂê¶ÁªßÁª≠? (y/n): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "ÂÆâË£ÖÂ∑≤ÂèñÊ∂à"
            exit 0
        fi
        log_warning "‰ΩøÁî®rootÁî®Êà∑ÁªßÁª≠ÂÆâË£Ö..."
    fi
}

# Ê£ÄÊµãÁ≥ªÁªü‰ø°ÊÅØ
detect_system() {
    log_header "üîç Ê£ÄÊµãÁ≥ªÁªü‰ø°ÊÅØ"
    
    # Ê£ÄÊµãÊû∂ÊûÑ
    ARCH=$(uname -m)
    log_info "Á≥ªÁªüÊû∂ÊûÑ: $ARCH"
    
    # Ê£ÄÊµãÊìç‰ΩúÁ≥ªÁªü
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        DISTRO=$ID
        DISTRO_VERSION=$VERSION_ID
        log_info "ÂèëË°åÁâà: $NAME $VERSION_ID"
    elif type lsb_release >/dev/null 2>&1; then
        DISTRO=$(lsb_release -si | tr '[:upper:]' '[:lower:]')
        DISTRO_VERSION=$(lsb_release -sr)
        log_info "ÂèëË°åÁâà: $(lsb_release -sd)"
    elif [[ -f /etc/redhat-release ]]; then
        DISTRO="rhel"
        DISTRO_VERSION=$(grep -oE '[0-9]+\.[0-9]+' /etc/redhat-release | head -1)
        log_info "ÂèëË°åÁâà: $(cat /etc/redhat-release)"
    elif [[ -f /etc/debian_version ]]; then
        DISTRO="debian"
        DISTRO_VERSION=$(cat /etc/debian_version)
        log_info "ÂèëË°åÁâà: Debian $DISTRO_VERSION"
    else
        DISTRO="unknown"
        DISTRO_VERSION="unknown"
        log_warning "Êú™ËÉΩËØÜÂà´ÁöÑÊìç‰ΩúÁ≥ªÁªü: $(uname -s)"
    fi
    
    log_info "ÂÜÖÊ†∏ÁâàÊú¨: $(uname -r)"
    log_info "‰∏ªÊú∫Âêç: $(hostname)"
    
    # Ê£ÄÊü•Á≥ªÁªüËµÑÊ∫ê
    log_step "Ê£ÄÊü•Á≥ªÁªüËµÑÊ∫ê..."
    
    # ÂÜÖÂ≠òÊ£ÄÊü•
    if command -v free >/dev/null 2>&1; then
        TOTAL_MEM_KB=$(free | awk '/^Mem:/{print $2}')
        TOTAL_MEM_MB=$((TOTAL_MEM_KB / 1024))
        AVAILABLE_MEM_KB=$(free | awk '/^Mem:/{print $7}')
        AVAILABLE_MEM_MB=$((AVAILABLE_MEM_KB / 1024))
        
        log_info "ÊÄªÂÜÖÂ≠ò: ${TOTAL_MEM_MB}MB"
        log_info "ÂèØÁî®ÂÜÖÂ≠ò: ${AVAILABLE_MEM_MB}MB"
        
        if (( TOTAL_MEM_MB < REQUIRED_MEMORY_MB )); then
            log_error "Á≥ªÁªüÂÜÖÂ≠ò‰∏çË∂≥ (ÂΩìÂâç: ${TOTAL_MEM_MB}MB, ÊúÄ‰ΩéË¶ÅÊ±Ç: ${REQUIRED_MEMORY_MB}MB)"
            exit 1
        fi
    else
        log_warning "Êó†Ê≥ïÊ£ÄÊµãÂÜÖÂ≠ò‰ø°ÊÅØ"
    fi
    
    # Á£ÅÁõòÁ©∫Èó¥Ê£ÄÊü•
    if command -v df >/dev/null 2>&1; then
        AVAILABLE_SPACE_KB=$(df . | awk 'NR==2 {print $4}')
        AVAILABLE_SPACE_GB=$((AVAILABLE_SPACE_KB / 1024 / 1024))
        
        log_info "ÂèØÁî®Á£ÅÁõòÁ©∫Èó¥: ${AVAILABLE_SPACE_GB}GB"
        
        if (( AVAILABLE_SPACE_GB < REQUIRED_DISK_GB )); then
            log_error "Á£ÅÁõòÁ©∫Èó¥‰∏çË∂≥ (ÂΩìÂâç: ${AVAILABLE_SPACE_GB}GB, ÊúÄ‰ΩéË¶ÅÊ±Ç: ${REQUIRED_DISK_GB}GB)"
            exit 1
        fi
    else
        log_warning "Êó†Ê≥ïÊ£ÄÊµãÁ£ÅÁõòÁ©∫Èó¥"
    fi
    
    # Ê£ÄÊü•ÁΩëÁªúËøûÊé•
    log_step "Ê£ÄÊü•ÁΩëÁªúËøûÊé•..."
    if ping -c 1 8.8.8.8 >/dev/null 2>&1; then
        log_success "ÁΩëÁªúËøûÊé•Ê≠£Â∏∏"
    elif ping -c 1 114.114.114.114 >/dev/null 2>&1; then
        log_success "ÁΩëÁªúËøûÊé•Ê≠£Â∏∏ (‰ΩøÁî®ÂõΩÂÜÖDNS)"
    else
        log_warning "ÁΩëÁªúËøûÊé•ÂºÇÂ∏∏ÔºåÂèØËÉΩÂΩ±Âìç‰æùËµñÂåÖ‰∏ãËΩΩ"
    fi
    
    # Ê£ÄÊü•Èò≤ÁÅ´Â¢ôÁä∂ÊÄÅ
    if command -v ufw >/dev/null 2>&1; then
        if ufw status | grep -q "Status: active"; then
            log_info "Ê£ÄÊµãÂà∞UFWÈò≤ÁÅ´Â¢ôÂ∑≤ÂêØÁî®"
        fi
    elif command -v firewall-cmd >/dev/null 2>&1; then
        if firewall-cmd --state 2>/dev/null | grep -q "running"; then
            log_info "Ê£ÄÊµãÂà∞firewalldÈò≤ÁÅ´Â¢ôÂ∑≤ÂêØÁî®"
        fi
    fi
    
    log_success "Á≥ªÁªüÊ£ÄÊµãÂÆåÊàê"
}

# Êô∫ËÉΩÊ£ÄÊµãÂåÖÁÆ°ÁêÜÂô®
detect_package_manager() {
    log_step "Ê£ÄÊµãÂåÖÁÆ°ÁêÜÂô®..."
    
    if command -v apt-get >/dev/null 2>&1; then
        PKG_MANAGER="apt"
    elif command -v yum >/dev/null 2>&1; then
        PKG_MANAGER="yum"
    elif command -v dnf >/dev/null 2>&1; then
        PKG_MANAGER="dnf"
    elif command -v pacman >/dev/null 2>&1; then
        PKG_MANAGER="pacman"
    elif command -v zypper >/dev/null 2>&1; then
        PKG_MANAGER="zypper"
    elif command -v emerge >/dev/null 2>&1; then
        PKG_MANAGER="emerge"
    else
        log_error "Êú™ÊâæÂà∞ÊîØÊåÅÁöÑÂåÖÁÆ°ÁêÜÂô®"
        log_error "ÊîØÊåÅÁöÑÂåÖÁÆ°ÁêÜÂô®: apt, yum, dnf, pacman, zypper, emerge"
        exit 1
    fi
    
    log_info "Ê£ÄÊµãÂà∞ÂåÖÁÆ°ÁêÜÂô®: $PKG_MANAGER"
}

# Êõ¥Êñ∞ÂåÖÂàóË°®
update_package_lists() {
    log_step "Êõ¥Êñ∞ÂåÖÂàóË°®..."
    
    case $PKG_MANAGER in
        apt)
            sudo apt-get update -qq
            ;;
        yum)
            sudo yum check-update -q || true
            ;;
        dnf)
            sudo dnf check-update -q || true
            ;;
        pacman)
            sudo pacman -Sy --noconfirm
            ;;
        zypper)
            sudo zypper refresh -q
            ;;
        emerge)
            sudo emerge --sync --quiet
            ;;
    esac
    
    log_success "ÂåÖÂàóË°®Êõ¥Êñ∞ÂÆåÊàê"
}

# ÂÆâË£ÖÂçï‰∏™ÂåÖ
install_package() {
    local package=$1
    log_step "ÂÆâË£Ö $package..."
    
    case $PKG_MANAGER in
        apt)
            if ! dpkg -l | grep -q "^ii.*$package"; then
                sudo apt-get install -y "$package" -qq
            else
                log_info "$package Â∑≤ÂÆâË£Ö"
                return 0
            fi
            ;;
        yum)
            if ! rpm -q "$package" >/dev/null 2>&1; then
                sudo yum install -y "$package" -q
            else
                log_info "$package Â∑≤ÂÆâË£Ö"
                return 0
            fi
            ;;
        dnf)
            if ! rpm -q "$package" >/dev/null 2>&1; then
                sudo dnf install -y "$package" -q
            else
                log_info "$package Â∑≤ÂÆâË£Ö"
                return 0
            fi
            ;;
        pacman)
            if ! pacman -Q "$package" >/dev/null 2>&1; then
                sudo pacman -S --noconfirm "$package"
            else
                log_info "$package Â∑≤ÂÆâË£Ö"
                return 0
            fi
            ;;
        zypper)
            if ! zypper se -i "$package" | grep -q "$package"; then
                sudo zypper install -y "$package"
            else
                log_info "$package Â∑≤ÂÆâË£Ö"
                return 0
            fi
            ;;
        emerge)
            sudo emerge -q "$package"
            ;;
    esac
    
    # È™åËØÅÂÆâË£Ö
    if command -v "$package" >/dev/null 2>&1; then
        log_success "$package ÂÆâË£ÖÊàêÂäü"
    else
        log_warning "$package ÂÆâË£ÖÂèØËÉΩÂ§±Ë¥•Ôºå‰ΩÜÁªßÁª≠ÂÆâË£Ö"
    fi
}

# ÂÆâË£ÖÁ≥ªÁªü‰æùËµñ
install_system_deps() {
    log_header "üì¶ ÂÆâË£ÖÁ≥ªÁªü‰æùËµñ"
    
    detect_package_manager
    update_package_lists
    
    # Âü∫Á°Ä‰æùËµñÂåÖÊò†Â∞Ñ
    declare -A BASIC_PACKAGES
    
    case $PKG_MANAGER in
        apt)
            BASIC_PACKAGES=(
                ["python"]="python3"
                ["pip"]="python3-pip" 
                ["venv"]="python3-venv"
                ["git"]="git"
                ["curl"]="curl"
                ["wget"]="wget"
                ["sqlite"]="sqlite3"
                ["build-tools"]="build-essential"
                ["dev-tools"]="python3-dev"
            )
            ;;
        yum|dnf)
            BASIC_PACKAGES=(
                ["python"]="python3"
                ["pip"]="python3-pip"
                ["venv"]="python3"
                ["git"]="git"
                ["curl"]="curl"
                ["wget"]="wget"
                ["sqlite"]="sqlite"
                ["build-tools"]="gcc gcc-c++ make"
                ["dev-tools"]="python3-devel"
            )
            ;;
        pacman)
            BASIC_PACKAGES=(
                ["python"]="python"
                ["pip"]="python-pip"
                ["venv"]="python"
                ["git"]="git"
                ["curl"]="curl"
                ["wget"]="wget"
                ["sqlite"]="sqlite"
                ["build-tools"]="base-devel"
                ["dev-tools"]=""
            )
            ;;
        zypper)
            BASIC_PACKAGES=(
                ["python"]="python3"
                ["pip"]="python3-pip"
                ["venv"]="python3"
                ["git"]="git"
                ["curl"]="curl"
                ["wget"]="wget"
                ["sqlite"]="sqlite3"
                ["build-tools"]="gcc gcc-c++ make"
                ["dev-tools"]="python3-devel"
            )
            ;;
    esac
    
    # ÂÆâË£ÖÂü∫Á°Ä‰æùËµñ
    log_step "ÂÆâË£ÖÂü∫Á°Ä‰æùËµñÂåÖ..."
    for package_type in python pip venv git curl wget sqlite build-tools dev-tools; do
        if [[ -n "${BASIC_PACKAGES[$package_type]}" ]]; then
            for pkg in ${BASIC_PACKAGES[$package_type]}; do
                install_package "$pkg"
            done
        fi
    done
    
    # ÂèØÈÄâ‰æùËµñËØ¢ÈóÆ
    echo
    echo -e "${CYAN}ÂèØÈÄâÂäüËÉΩÂÆâË£Ö:${NC}"
    
    # Â§öÂ™í‰ΩìÂ§ÑÁêÜ‰æùËµñ
    read -p "ÊòØÂê¶ÂÆâË£ÖÂ§öÂ™í‰ΩìÂ§ÑÁêÜ‰æùËµñ (ImageMagick, FFmpeg)? Êé®ËçêÂÆâË£Ö (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        case $PKG_MANAGER in
            apt)
                install_package "imagemagick"
                install_package "ffmpeg"
                ;;
            yum|dnf)
                install_package "ImageMagick"
                install_package "ffmpeg"
                ;;
            pacman)
                install_package "imagemagick"
                install_package "ffmpeg"
                ;;
            zypper)
                install_package "ImageMagick"
                install_package "ffmpeg"
                ;;
        esac
    fi
    
    # OCR‰æùËµñ
    read -p "ÊòØÂê¶ÂÆâË£ÖOCRÊñáÂ≠óËØÜÂà´‰æùËµñ (Tesseract)? Êé®ËçêÂÆâË£Ö (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        case $PKG_MANAGER in
            apt)
                install_package "tesseract-ocr"
                install_package "tesseract-ocr-chi-sim" 
                install_package "tesseract-ocr-eng"
                ;;
            yum|dnf)
                install_package "tesseract"
                install_package "tesseract-langpack-chi_sim"
                install_package "tesseract-langpack-eng"
                ;;
            pacman)
                install_package "tesseract"
                install_package "tesseract-data-chi_sim"
                install_package "tesseract-data-eng"
                ;;
            zypper)
                install_package "tesseract-ocr"
                install_package "tesseract-ocr-traineddata-chinese_simplified"
                install_package "tesseract-ocr-traineddata-english"
                ;;
        esac
    fi
    
    log_success "Á≥ªÁªü‰æùËµñÂÆâË£ÖÂÆåÊàê"
}

# Êô∫ËÉΩÊ£ÄÊµãPythonÁéØÂ¢É
detect_python() {
    log_step "Ê£ÄÊµãPythonÁéØÂ¢É..."
    
    # Ê£ÄÊµãÂèØÁî®ÁöÑPythonÂëΩ‰ª§
    local python_candidates=("python3" "python" "python3.11" "python3.10" "python3.9" "python3.8")
    
    for cmd in "${python_candidates[@]}"; do
        if command -v "$cmd" >/dev/null 2>&1; then
            local version=$($cmd -c 'import sys; print(".".join(map(str, sys.version_info[:2])))' 2>/dev/null)
            if [[ -n "$version" ]]; then
                log_info "ÂèëÁé∞Python: $cmd (ÁâàÊú¨ $version)"
                
                # Ê£ÄÊü•ÁâàÊú¨ÊòØÂê¶Á¨¶ÂêàË¶ÅÊ±Ç
                if $cmd -c "import sys; exit(not (sys.version_info >= (3, 8)))" 2>/dev/null; then
                    PYTHON_CMD="$cmd"
                    log_success "‰ΩøÁî®Python: $PYTHON_CMD (ÁâàÊú¨ $version)"
                    break
                else
                    log_warning "$cmd ÁâàÊú¨Ëøá‰Ωé ($version < $MIN_PYTHON_VERSION)"
                fi
            fi
        fi
    done
    
    if [[ -z "$PYTHON_CMD" ]]; then
        log_error "Êú™ÊâæÂà∞Á¨¶ÂêàË¶ÅÊ±ÇÁöÑPythonÁâàÊú¨ (ÈúÄË¶Å >= $MIN_PYTHON_VERSION)"
        exit 1
    fi
}

# Ê£ÄÊµãpipÁéØÂ¢É
detect_pip() {
    log_step "Ê£ÄÊµãpipÁéØÂ¢É..."
    
    # Ê£ÄÊµãÂèØÁî®ÁöÑpipÂëΩ‰ª§
    local pip_candidates=("pip3" "pip" "$PYTHON_CMD -m pip")
    
    for cmd in "${pip_candidates[@]}"; do
        if eval "$cmd --version" >/dev/null 2>&1; then
            PIP_CMD="$cmd"
            local pip_version=$(eval "$cmd --version" | awk '{print $2}')
            log_success "‰ΩøÁî®pip: $PIP_CMD (ÁâàÊú¨ $pip_version)"
            break
        fi
    done
    
    if [[ -z "$PIP_CMD" ]]; then
        log_warning "Êú™ÊâæÂà∞pipÔºåÂ∞ùËØïÂÆâË£Ö..."
        
        # Â∞ùËØïÈÄöËøáensurepipÂÆâË£Öpip
        if $PYTHON_CMD -m ensurepip --upgrade 2>/dev/null; then
            PIP_CMD="$PYTHON_CMD -m pip"
            log_success "pipÂÆâË£ÖÊàêÂäü"
        else
            log_error "pipÂÆâË£ÖÂ§±Ë¥•"
            exit 1
        fi
    fi
}

# Ê£ÄÊü•PythonÊ®°Âùó
check_python_modules() {
    log_step "Ê£ÄÊü•PythonÁéØÂ¢ÉÂÆåÊï¥ÊÄß..."
    
    # Ê£ÄÊü•ÂÖ≥ÈîÆÊ®°Âùó
    local required_modules=("venv" "ssl" "sqlite3" "json" "urllib")
    
    for module in "${required_modules[@]}"; do
        if $PYTHON_CMD -c "import $module" 2>/dev/null; then
            log_info "‚úì $module Ê®°ÂùóÂèØÁî®"
        else
            log_warning "‚úó $module Ê®°Âùó‰∏çÂèØÁî®"
        fi
    done
    
    # Ê£ÄÊü•pipÊòØÂê¶ÂèØ‰ª•ÂçáÁ∫ß
    log_step "Ê£ÄÊü•pipÁâàÊú¨..."
    eval "$PIP_CMD install --upgrade pip --quiet" || log_warning "pipÂçáÁ∫ßÂ§±Ë¥•"
}

# Ê£ÄÊü•PythonÁâàÊú¨
check_python() {
    log_header "üêç Ê£ÄÊü•PythonÁéØÂ¢É"
    
    detect_python
    detect_pip
    check_python_modules
    
    # ÊòæÁ§∫ÊúÄÁªàÁéØÂ¢É‰ø°ÊÅØ
    local python_version=$($PYTHON_CMD --version)
    local pip_version=$(eval "$PIP_CMD --version" | awk '{print $2}')
    
    log_success "PythonÁéØÂ¢ÉÈÖçÁΩÆÂÆåÊàê"
    log_info "PythonÂëΩ‰ª§: $PYTHON_CMD"
    log_info "PythonÁâàÊú¨: $python_version"
    log_info "PipÂëΩ‰ª§: $PIP_CMD" 
    log_info "PipÁâàÊú¨: $pip_version"
}

# ÂàõÂª∫ËôöÊãüÁéØÂ¢É
setup_venv() {
    log_header "üèóÔ∏è ÂàõÂª∫PythonËôöÊãüÁéØÂ¢É"
    
    # Ê£ÄÊü•Áé∞ÊúâËôöÊãüÁéØÂ¢É
    if [[ -d "venv" ]]; then
        log_warning "Ê£ÄÊµãÂà∞Áé∞ÊúâËôöÊãüÁéØÂ¢É"
        echo -e "${YELLOW}ÈÄâÈ°π:${NC}"
        echo "1) Âà†Èô§Âπ∂ÈáçÂª∫ËôöÊãüÁéØÂ¢É"
        echo "2) ‰ΩøÁî®Áé∞ÊúâËôöÊãüÁéØÂ¢É"
        echo "3) Â§á‰ªΩÁé∞ÊúâÁéØÂ¢ÉÂπ∂ÂàõÂª∫Êñ∞ÁéØÂ¢É"
        
        read -p "ËØ∑ÈÄâÊã© (1-3): " -n 1 -r
        echo
        
        case $REPLY in
            1)
                log_info "Âà†Èô§Áé∞ÊúâËôöÊãüÁéØÂ¢É..."
                rm -rf venv
                ;;
            2)
                log_info "‰ΩøÁî®Áé∞ÊúâËôöÊãüÁéØÂ¢É"
                # ÊµãËØïÁé∞ÊúâÁéØÂ¢É
                if source venv/bin/activate 2>/dev/null; then
                    log_success "Áé∞ÊúâËôöÊãüÁéØÂ¢ÉÂèØÁî®"
                    return 0
                else
                    log_warning "Áé∞ÊúâËôöÊãüÁéØÂ¢ÉÊçüÂùèÔºåÂ∞ÜÈáçÂª∫"
                    rm -rf venv
                fi
                ;;
            3)
                log_info "Â§á‰ªΩÁé∞ÊúâËôöÊãüÁéØÂ¢É..."
                mv venv "venv_backup_$(date +%Y%m%d_%H%M%S)"
                ;;
            *)
                log_info "‰ΩøÁî®Áé∞ÊúâËôöÊãüÁéØÂ¢É"
                if source venv/bin/activate 2>/dev/null; then
                    return 0
                else
                    rm -rf venv
                fi
                ;;
        esac
    fi
    
    log_step "ÂàõÂª∫Êñ∞ÁöÑËôöÊãüÁéØÂ¢É..."
    if ! $PYTHON_CMD -m venv venv; then
        log_error "ËôöÊãüÁéØÂ¢ÉÂàõÂª∫Â§±Ë¥•"
        exit 1
    fi
    
    log_step "ÊøÄÊ¥ªËôöÊãüÁéØÂ¢É..."
    if ! source venv/bin/activate; then
        log_error "ËôöÊãüÁéØÂ¢ÉÊøÄÊ¥ªÂ§±Ë¥•"
        exit 1
    fi
    
    log_step "ÂçáÁ∫ßËôöÊãüÁéØÂ¢É‰∏≠ÁöÑpip..."
    if ! pip install --upgrade pip --quiet; then
        log_warning "pipÂçáÁ∫ßÂ§±Ë¥•Ôºå‰ΩÜÁªßÁª≠ÂÆâË£Ö"
    fi
    
    # È™åËØÅËôöÊãüÁéØÂ¢É
    local venv_python=$(which python)
    local venv_pip=$(which pip)
    
    log_info "ËôöÊãüÁéØÂ¢ÉPython: $venv_python"
    log_info "ËôöÊãüÁéØÂ¢Épip: $venv_pip"
    
    log_success "ËôöÊãüÁéØÂ¢ÉËÆæÁΩÆÂÆåÊàê"
}

# ÂàõÂª∫requirements.txt (Â¶ÇÊûú‰∏çÂ≠òÂú®)
create_requirements() {
    if [[ ! -f "requirements.txt" ]]; then
        log_warning "requirements.txt ‰∏çÂ≠òÂú®ÔºåÂàõÂª∫ÈªòËÆ§ÁâàÊú¨..."
        
        cat > requirements.txt << 'EOF'
# Ê†∏ÂøÉ‰æùËµñ
python-telegram-bot==20.7
psutil==5.9.0
dataclasses-json==0.6.3

# ÂõæÁâáÂíåÂ§öÂ™í‰ΩìÂ§ÑÁêÜ
Pillow==10.1.0
pytz==2023.3

# ÂèØÈÄâ‰æùËµñ (Â¶ÇÊûúÈúÄË¶ÅÁõ∏Â∫îÂäüËÉΩËØ∑ÂèñÊ∂àÊ≥®Èáä)
# pytesseract==0.3.10  # OCRÊñáÂ≠óËØÜÂà´
# moviepy==1.0.3       # ËßÜÈ¢ëÂ§ÑÁêÜ
# mutagen==1.47.0      # Èü≥È¢ëÂÖÉÊï∞ÊçÆ
# babel==2.13.1        # Êú¨Âú∞Âåñ
# redis==5.0.1         # ÁºìÂ≠ò (ÂèØÈÄâ)

# ÂºÄÂèëÂíåË∞ÉËØï
# pytest==7.4.3       # ÊµãËØïÊ°ÜÊû∂
# black==23.11.0       # ‰ª£Á†ÅÊ†ºÂºèÂåñ
EOF
        log_info "ÈªòËÆ§requirements.txtÂ∑≤ÂàõÂª∫"
    fi
}

# ÂÆâË£ÖPython‰æùËµñ
install_python_deps() {
    log_header "üìö ÂÆâË£ÖPython‰æùËµñÂåÖ"
    
    # ÊøÄÊ¥ªËôöÊãüÁéØÂ¢É
    source venv/bin/activate
    
    # ÂàõÂª∫requirements.txt (Â¶ÇÊûúÈúÄË¶Å)
    create_requirements
    
    log_step "ÂàÜÊûê‰æùËµñÂåÖ..."
    local total_packages=$(grep -v '^#' requirements.txt | grep -v '^$' | wc -l)
    log_info "ÈúÄË¶ÅÂÆâË£Ö $total_packages ‰∏™ÂåÖ"
    
    log_step "ÂçáÁ∫ßpipÂíåÂü∫Á°ÄÂ∑•ÂÖ∑..."
    pip install --upgrade pip setuptools wheel --quiet
    
    log_step "ÂÆâË£ÖPython‰æùËµñÂåÖ..."
    log_info "ËøôÂèØËÉΩÈúÄË¶ÅÂá†ÂàÜÈíüÊó∂Èó¥ÔºåËØ∑ËÄêÂøÉÁ≠âÂæÖ..."
    
    # ‰ΩøÁî®Ë∂ÖÊó∂ÂíåÈáçËØïÊú∫Âà∂ÂÆâË£Ö‰æùËµñ
    local max_retries=3
    local retry_count=0
    
    while (( retry_count < max_retries )); do
        if timeout 600 pip install -r requirements.txt --quiet --no-cache-dir; then
            log_success "‰æùËµñÂåÖÂÆâË£ÖÊàêÂäü"
            break
        else
            retry_count=$((retry_count + 1))
            if (( retry_count < max_retries )); then
                log_warning "ÂÆâË£ÖÂ§±Ë¥•ÔºåÁ¨¨ $retry_count Ê¨°ÈáçËØï..."
                sleep 5
            else
                log_error "‰æùËµñÂåÖÂÆâË£ÖÂ§±Ë¥•ÔºåÂ∑≤ÈáçËØï $max_retries Ê¨°"
                exit 1
            fi
        fi
    done
    
    # È™åËØÅÂÖ≥ÈîÆÂåÖ
    log_step "È™åËØÅÂÖ≥ÈîÆ‰æùËµñÂåÖ..."
    local critical_packages=("telegram" "PIL" "psutil")
    local missing_packages=()
    
    for package in "${critical_packages[@]}"; do
        if python -c "import $package" 2>/dev/null; then
            log_success "‚úì $package Ê®°ÂùóÂèØÁî®"
        else
            log_error "‚úó $package Ê®°Âùó‰∏çÂèØÁî®"
            missing_packages+=("$package")
        fi
    done
    
    if [[ ${#missing_packages[@]} -gt 0 ]]; then
        log_error "ÂÖ≥ÈîÆÊ®°ÂùóÁº∫Â§±: ${missing_packages[*]}"
        exit 1
    fi
    
    # ÊòæÁ§∫Â∑≤ÂÆâË£ÖÁöÑÂåÖ
    log_step "ÁîüÊàê‰æùËµñÂåÖÊ∏ÖÂçï..."
    pip list --format=freeze > installed_packages.txt
    local installed_count=$(wc -l < installed_packages.txt)
    log_info "Â∑≤ÂÆâË£Ö $installed_count ‰∏™PythonÂåÖ"
    
    # Ê£ÄÊü•ÂèØÈÄâÂäüËÉΩ
    log_step "Ê£ÄÊü•ÂèØÈÄâÂäüËÉΩÊîØÊåÅ..."
    
    # OCRÊîØÊåÅ
    if python -c "import pytesseract" 2>/dev/null; then
        log_success "‚úì OCRÂäüËÉΩÊîØÊåÅÂ∑≤ÂêØÁî®"
    else
        log_info "‚óã OCRÂäüËÉΩÊú™ÂêØÁî® (ÈúÄË¶Åpytesseract)"
    fi
    
    # ËßÜÈ¢ëÂ§ÑÁêÜÊîØÊåÅ
    if python -c "import moviepy" 2>/dev/null; then
        log_success "‚úì ËßÜÈ¢ëÂ§ÑÁêÜÂäüËÉΩÂ∑≤ÂêØÁî®"
    else
        log_info "‚óã ËßÜÈ¢ëÂ§ÑÁêÜÂäüËÉΩÊú™ÂêØÁî® (ÈúÄË¶Åmoviepy)"
    fi
    
    # Èü≥È¢ëÂ§ÑÁêÜÊîØÊåÅ
    if python -c "import mutagen" 2>/dev/null; then
        log_success "‚úì Èü≥È¢ëÂ§ÑÁêÜÂäüËÉΩÂ∑≤ÂêØÁî®"
    else
        log_info "‚óã Èü≥È¢ëÂ§ÑÁêÜÂäüËÉΩÊú™ÂêØÁî® (ÈúÄË¶Åmutagen)"
    fi
    
    log_success "Python‰æùËµñÂÆâË£ÖÂíåÈ™åËØÅÂÆåÊàê"
}

# È™åËØÅTelegram Token
validate_token() {
    local token=$1
    local bot_name=$2
    
    log_step "È™åËØÅ $bot_name Token..."
    
    local response=$(curl -s --connect-timeout 10 "https://api.telegram.org/bot$token/getMe")
    
    if echo "$response" | grep -q '"ok":true'; then
        local bot_username=$(echo "$response" | python3 -c "
import sys, json
try:
    data = json.load(sys.stdin)
    print(data['result']['username'])
except:
    print('unknown')
")
        log_success "$bot_name TokenÊúâÊïà (@$bot_username)"
        return 0
    else
        log_error "$bot_name TokenÊó†Êïà"
        return 1
    fi
}

# Êô∫ËÉΩÈÖçÁΩÆÂêëÂØº
show_configuration_guide() {
    log_header "üìã ÈÖçÁΩÆÂêëÂØº"
    
    echo -e "${CYAN}Ê¨¢Ëøé‰ΩøÁî®ÈÖçÁΩÆÂêëÂØºÔºÅ${NC}"
    echo
    echo -e "${YELLOW}Âú®ÂºÄÂßãÈÖçÁΩÆ‰πãÂâçÔºåËØ∑Á°Æ‰øùÊÇ®Â∑≤ÂÆåÊàê‰ª•‰∏ãÂáÜÂ§áÂ∑•‰Ωú:${NC}"
    echo
    echo "ü§ñ ${WHITE}1. ÂàõÂª∫‰∏â‰∏™TelegramÊú∫Âô®‰∫∫${NC}"
    echo "   ‚Ä¢ ‰∏é @BotFather ÂØπËØù"
    echo "   ‚Ä¢ ‰ΩøÁî® /newbot ÂëΩ‰ª§ÂàõÂª∫‰∏â‰∏™Êú∫Âô®‰∫∫"
    echo "   ‚Ä¢ ‰øùÂ≠ò‰∏â‰∏™Êú∫Âô®‰∫∫ÁöÑToken"
    echo
    echo "üì¢ ${WHITE}2. ÂàõÂª∫È¢ëÈÅìÂíåÁæ§ÁªÑ${NC}"
    echo "   ‚Ä¢ ÂàõÂª∫‰∏Ä‰∏™ÁõÆÊ†áÈ¢ëÈÅì (Áî®‰∫éÂèëÂ∏ÉÂÜÖÂÆπ)"
    echo "   ‚Ä¢ ÂàõÂª∫‰∏Ä‰∏™ÂÆ°Ê†∏Áæ§ÁªÑ (ÁÆ°ÁêÜÂëòÂÆ°Ê†∏ÊäïÁ®ø)"
    echo "   ‚Ä¢ ÂàõÂª∫‰∏Ä‰∏™ÁÆ°ÁêÜÁæ§ÁªÑ (Êé•Êî∂Á≥ªÁªüÈÄöÁü•)"
    echo
    echo "üîê ${WHITE}3. ËÆæÁΩÆÊùÉÈôê${NC}"
    echo "   ‚Ä¢ Â∞Ü‰∏â‰∏™Êú∫Âô®‰∫∫ÈÉΩÊ∑ªÂä†Âà∞Áæ§ÁªÑ/È¢ëÈÅì"
    echo "   ‚Ä¢ ËÆæÁΩÆÊú∫Âô®‰∫∫‰∏∫ÁÆ°ÁêÜÂëò"
    echo "   ‚Ä¢ Áªô‰∫àÂøÖË¶ÅÁöÑÊùÉÈôê"
    echo
    echo "üÜî ${WHITE}4. Ëé∑ÂèñID${NC}"
    echo "   ‚Ä¢ ËΩ¨ÂèëÈ¢ëÈÅì/Áæ§ÁªÑÊ∂àÊÅØÁªô @userinfobot"
    echo "   ‚Ä¢ ËÆ∞ÂΩïÈ¢ëÈÅìÂíåÁæ§ÁªÑÁöÑID (ÈÄöÂ∏∏ÊòØË¥üÊï∞)"
    echo "   ‚Ä¢ ËÆ∞ÂΩïÊÇ®ÁöÑÁî®Êà∑ID (Ê≠£Êï∞)"
    echo
    echo "üìñ ${WHITE}Êõ¥ËØ¶ÁªÜÁöÑËØ¥ÊòéËØ∑Êü•Áúã README.md ÊñáÊ°£${NC}"
    echo
    
    # ÈÄâÊã©ÈÖçÁΩÆÊñπÂºè
    echo -e "${CYAN}ÈÖçÁΩÆÊñπÂºèÈÄâÊã©:${NC}"
    echo "1) üöÄ ‰∫§‰∫íÂºèÈÖçÁΩÆ (Êé®Ëçê) - ÈÄêÊ≠•ÂºïÂØºÈÖçÁΩÆ"
    echo "2) üìÅ ÂØºÂÖ•ÈÖçÁΩÆÊñá‰ª∂ - ‰ΩøÁî®Áé∞Êúâconfig.ini"
    echo "3) üìù ÊâãÂä®ÈÖçÁΩÆ - ÂàõÂª∫ÊúÄÂ∞èÈÖçÁΩÆÂêéÊâãÂä®ÁºñËæë"
    echo "4) üìã Êü•ÁúãÈÖçÁΩÆÁ§∫‰æã - ÊòæÁ§∫ÈÖçÁΩÆÊñá‰ª∂Á§∫‰æã"
    echo
    
    read -p "ËØ∑ÈÄâÊã©ÈÖçÁΩÆÊñπÂºè (1-4): " -n 1 -r
    echo
    
    case $REPLY in
        1) interactive_configuration ;;
        2) import_configuration ;;
        3) minimal_configuration ;;
        4) show_configuration_example ;;
        *) 
            log_info "‰ΩøÁî®ÈªòËÆ§ÊñπÂºè (‰∫§‰∫íÂºèÈÖçÁΩÆ)"
            interactive_configuration
            ;;
    esac
}

# ‰∫§‰∫íÂºèÈÖçÁΩÆ
interactive_configuration() {
    log_step "ÂºÄÂßã‰∫§‰∫íÂºèÈÖçÁΩÆ..."
    
    # Â§á‰ªΩÁé∞ÊúâÈÖçÁΩÆ
    if [[ -f "config.ini" ]]; then
        mkdir -p "$BACKUP_DIR"
        cp config.ini "$BACKUP_DIR/config.ini"
        log_info "Â∑≤Â§á‰ªΩÁé∞ÊúâÈÖçÁΩÆÊñá‰ª∂Âà∞ $BACKUP_DIR"
    fi
    
    log_step "Êî∂ÈõÜÊú∫Âô®‰∫∫ÈÖçÁΩÆ‰ø°ÊÅØ..."
    
    # ËæìÂÖ•Êú∫Âô®‰∫∫Token
    echo -e "\n${CYAN}=== ü§ñ Êú∫Âô®‰∫∫TokenÈÖçÁΩÆ ===${NC}"
    echo -e "${YELLOW}ËØ∑‰æùÊ¨°ËæìÂÖ•‰∏â‰∏™Êú∫Âô®‰∫∫ÁöÑToken${NC}"
    echo
    
    # ÊäïÁ®øÊú∫Âô®‰∫∫Token
    while true; do
        read -p "üìù ÊäïÁ®øÊú∫Âô®‰∫∫Token: " SUBMISSION_TOKEN
        if [[ -n "$SUBMISSION_TOKEN" ]]; then
            if validate_token "$SUBMISSION_TOKEN" "ÊäïÁ®øÊú∫Âô®‰∫∫"; then
                break
            else
                echo -e "${RED}TokenÈ™åËØÅÂ§±Ë¥•ÔºåËØ∑ÈáçÊñ∞ËæìÂÖ•${NC}"
            fi
        else
            echo -e "${RED}Token‰∏çËÉΩ‰∏∫Á©∫ÔºåËØ∑ÈáçÊñ∞ËæìÂÖ•${NC}"
        fi
    done
    
    # ÂèëÂ∏ÉÊú∫Âô®‰∫∫Token  
    while true; do
        read -p "üì¢ ÂèëÂ∏ÉÊú∫Âô®‰∫∫Token: " PUBLISH_TOKEN
        if [[ -n "$PUBLISH_TOKEN" ]]; then
            if validate_token "$PUBLISH_TOKEN" "ÂèëÂ∏ÉÊú∫Âô®‰∫∫"; then
                break
            else
                echo -e "${RED}TokenÈ™åËØÅÂ§±Ë¥•ÔºåËØ∑ÈáçÊñ∞ËæìÂÖ•${NC}"
            fi
        else
            echo -e "${RED}Token‰∏çËÉΩ‰∏∫Á©∫ÔºåËØ∑ÈáçÊñ∞ËæìÂÖ•${NC}"
        fi
    done
    
    # ÊéßÂà∂Êú∫Âô®‰∫∫Token
    while true; do
        read -p "üéõÔ∏è  ÊéßÂà∂Êú∫Âô®‰∫∫Token: " CONTROL_TOKEN
        if [[ -n "$CONTROL_TOKEN" ]]; then
            if validate_token "$CONTROL_TOKEN" "ÊéßÂà∂Êú∫Âô®‰∫∫"; then
                break
            else
                echo -e "${RED}TokenÈ™åËØÅÂ§±Ë¥•ÔºåËØ∑ÈáçÊñ∞ËæìÂÖ•${NC}"
            fi
        else
            echo -e "${RED}Token‰∏çËÉΩ‰∏∫Á©∫ÔºåËØ∑ÈáçÊñ∞ËæìÂÖ•${NC}"
        fi
    done
    
    # ËæìÂÖ•È¢ëÈÅì/Áæ§ÁªÑID
    echo -e "\n${CYAN}=== üì¢ È¢ëÈÅì/Áæ§ÁªÑIDÈÖçÁΩÆ ===${NC}"
    echo -e "${YELLOW}üí° ÊèêÁ§∫: ${NC}"
    echo "‚Ä¢ È¢ëÈÅì/Áæ§ÁªÑIDÈÄöÂ∏∏ÊòØË¥üÊï∞ÔºåÊ†ºÂºèÂ¶Ç: -1001234567890"
    echo "‚Ä¢ ÂèØ‰ª•ËΩ¨ÂèëÈ¢ëÈÅì/Áæ§ÁªÑÊ∂àÊÅØÁªô @userinfobot Ëé∑ÂèñID"
    echo "‚Ä¢ Á°Æ‰øùÊú∫Âô®‰∫∫Â∑≤Âä†ÂÖ•ÂØπÂ∫îÈ¢ëÈÅì/Áæ§ÁªÑÂπ∂ËÆæ‰∏∫ÁÆ°ÁêÜÂëò"
    echo
    
    read -p "üì∫ ÁõÆÊ†áÈ¢ëÈÅìID (ÂèëÂ∏ÉÂÜÖÂÆπÁöÑÈ¢ëÈÅì): " CHANNEL_ID
    read -p "üë• ÂÆ°Ê†∏Áæ§ÁªÑID (ÁÆ°ÁêÜÂëòÂÆ°Ê†∏ÊäïÁ®ø): " REVIEW_GROUP_ID
    read -p "üõ°Ô∏è  ÁÆ°ÁêÜÁæ§ÁªÑID (Á≥ªÁªüÈÄöÁü•Áæ§ÁªÑ): " ADMIN_GROUP_ID
    
    # ËæìÂÖ•ÁÆ°ÁêÜÂëòID
    echo -e "\n${CYAN}=== üë®‚Äçüíº ÁÆ°ÁêÜÂëòÈÖçÁΩÆ ===${NC}"
    echo -e "${YELLOW}üí° ÊèêÁ§∫: ${NC}"
    echo "‚Ä¢ ÁÆ°ÁêÜÂëòIDÊòØÊ≠£Êï∞ÔºåÂèØ‰ª•‰ªé @userinfobot Ëé∑Âèñ"
    echo "‚Ä¢ Â§ö‰∏™ÁÆ°ÁêÜÂëòËØ∑Áî®ÈÄóÂè∑ÂàÜÈöîÔºåÂ¶Ç: 123456789,987654321"
    echo "‚Ä¢ Á¨¨‰∏Ä‰∏™IDÂ∞ÜÊàê‰∏∫Ë∂ÖÁ∫ßÁÆ°ÁêÜÂëò"
    echo
    
    read -p "üë§ ÁÆ°ÁêÜÂëòÁî®Êà∑ID: " ADMIN_USERS
    
    # È´òÁ∫ßËÆæÁΩÆËØ¢ÈóÆ
    echo -e "\n${CYAN}=== È´òÁ∫ßÈÖçÁΩÆ ===${NC}"
    
    # ÂπøÂëäËÆæÁΩÆ
    read -p "ÊòØÂê¶ÂêØÁî®ÂπøÂëäÁ≥ªÁªü? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        AD_ENABLED="true"
        read -p "ÊØèÁØáÊñáÁ´†ÊúÄÂ§ßÂπøÂëäÊï∞ (1-5, ÈªòËÆ§3): " MAX_ADS
        MAX_ADS=${MAX_ADS:-3}
        read -p "ÊòØÂê¶ÊòæÁ§∫ÂπøÂëäÊ†áÁ≠æ? (y/n): " -n 1 -r
        echo
        SHOW_AD_LABEL=$([[ $REPLY =~ ^[Yy]$ ]] && echo "true" || echo "false")
    else
        AD_ENABLED="false"
        MAX_ADS="0"
        SHOW_AD_LABEL="false"
    fi
    
    # Â§öÂ™í‰ΩìËÆæÁΩÆ
    read -p "ÊòØÂê¶ÂêØÁî®OCRÊñáÂ≠óËØÜÂà´? (y/n): " -n 1 -r
    echo
    ENABLE_OCR=$([[ $REPLY =~ ^[Yy]$ ]] && echo "true" || echo "false")
    
    read -p "ÊòØÂê¶ÂêØÁî®ÂõæÁâáËá™Âä®ÂéãÁº©? (y/n): " -n 1 -r
    echo
    ENABLE_COMPRESS=$([[ $REPLY =~ ^[Yy]$ ]] && echo "true" || echo "false")
    
    # ÊÄßËÉΩËÆæÁΩÆ
    echo -e "${YELLOW}ÊÄßËÉΩËÆæÁΩÆ (‰ΩøÁî®ÈªòËÆ§ÂÄºÂç≥ÂèØ):${NC}"
    read -p "Êï∞ÊçÆÂ∫ìËøûÊé•Ê±†Â§ßÂ∞è (ÈªòËÆ§10): " DB_POOL_SIZE
    DB_POOL_SIZE=${DB_POOL_SIZE:-10}
    
    read -p "ÂºÇÊ≠•Â∑•‰ΩúËøõÁ®ãÊï∞ (ÈªòËÆ§5): " ASYNC_WORKERS
    ASYNC_WORKERS=${ASYNC_WORKERS:-5}
    
    # Â§öËØ≠Ë®ÄËÆæÁΩÆ
    echo -e "${YELLOW}Â§öËØ≠Ë®ÄËÆæÁΩÆ:${NC}"
    echo "ÊîØÊåÅÁöÑËØ≠Ë®Ä: zh-CN(‰∏≠Êñá), en-US(Ëã±ËØ≠), ja-JP(Êó•ËØ≠), ko-KR(Èü©ËØ≠)"
    read -p "ÈªòËÆ§ËØ≠Ë®Ä (ÈªòËÆ§zh-CN): " DEFAULT_LANG
    DEFAULT_LANG=${DEFAULT_LANG:-zh-CN}
    
    read -p "ÈªòËÆ§Êó∂Âå∫ (ÈªòËÆ§Asia/Shanghai): " DEFAULT_TZ
    DEFAULT_TZ=${DEFAULT_TZ:-Asia/Shanghai}
    
    # ÁîüÊàêÈÖçÁΩÆÊñá‰ª∂
    cat > config.ini << EOF
[telegram]
# Êú∫Âô®‰∫∫Token (ÂøÖÂ°´)
submission_bot_token = $SUBMISSION_TOKEN
publish_bot_token = $PUBLISH_TOKEN
admin_bot_token = $CONTROL_TOKEN

# È¢ëÈÅìÂíåÁæ§ÁªÑID (ÂøÖÂ°´)
channel_id = $CHANNEL_ID
admin_group_id = $ADMIN_GROUP_ID
review_group_id = $REVIEW_GROUP_ID

# ÁÆ°ÁêÜÂëòÁî®Êà∑IDÂàóË°® (ÂøÖÂ°´)
admin_users = $ADMIN_USERS

[database]
db_file = telegram_bot.db

[settings]
# ÊäïÁ®øËÆæÁΩÆ
require_approval = true
auto_publish_delay = 0
max_file_size = 50

# ÂπøÂëäËÆæÁΩÆ
ad_enabled = $AD_ENABLED
max_ads_per_post = $MAX_ADS
show_ad_label = $SHOW_AD_LABEL

# Â§öÂ™í‰ΩìËÆæÁΩÆ
enable_ocr = $ENABLE_OCR
enable_image_compress = $ENABLE_COMPRESS
enable_video_thumbnail = true

# ÊÄßËÉΩËÆæÁΩÆ
db_pool_size = $DB_POOL_SIZE
cache_enabled = true
async_workers = $ASYNC_WORKERS

# Â§öËØ≠Ë®ÄËÆæÁΩÆ
default_language = $DEFAULT_LANG
default_timezone = $DEFAULT_TZ

[performance]
# Êï∞ÊçÆÂ∫ìËøûÊé•Ê±†
db_pool_size = $DB_POOL_SIZE
db_max_overflow = 5

# ÂºÇÊ≠•‰ªªÂä°ÈòüÂàó
async_max_workers = $ASYNC_WORKERS
async_queue_size = 1000

# ÂÜÖÂ≠òÁºìÂ≠ò
cache_max_size = 1000
cache_default_ttl = 3600

# Êñá‰ª∂Â§ÑÁêÜ
max_file_size = 50
enable_compression = $ENABLE_COMPRESS

[media]
# ÂõæÁâáÂ§ÑÁêÜ
image_quality = medium
max_image_size = 2048
enable_ocr = $ENABLE_OCR
ocr_languages = chi_sim+eng

# ËßÜÈ¢ëÂ§ÑÁêÜ
enable_video_thumbnail = true
thumbnail_time = 1.0
max_video_size = 100

# Èü≥È¢ëÂ§ÑÁêÜ
enable_audio_metadata = true

[advertisement]
# Âü∫Á°ÄËÆæÁΩÆ
enabled = $AD_ENABLED
max_ads_per_post = $MAX_ADS
min_ads_per_post = 0

# ÊòæÁ§∫ËÆæÁΩÆ
show_ad_label = $SHOW_AD_LABEL
ad_separator = "\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
random_selection = true

# ÁªüËÆ°ËÆæÁΩÆ
track_clicks = true
EOF
    
    # ËÆæÁΩÆÈÖçÁΩÆÊñá‰ª∂ÊùÉÈôê
    chmod 600 config.ini
    
    log_success "ÈÖçÁΩÆÊñá‰ª∂ÂàõÂª∫ÂÆåÊàê"
}

# ÂØºÂÖ•ÈÖçÁΩÆÊñá‰ª∂
import_configuration() {
    log_step "ÂØºÂÖ•Áé∞ÊúâÈÖçÁΩÆÊñá‰ª∂..."
    
    if [[ -f "config.ini" ]]; then
        log_success "‰ΩøÁî®Áé∞ÊúâÈÖçÁΩÆÊñá‰ª∂"
        return 0
    else
        log_error "Êú™ÊâæÂà∞config.iniÊñá‰ª∂"
        read -p "ÊòØÂê¶ÂàáÊç¢Âà∞‰∫§‰∫íÂºèÈÖçÁΩÆ? (y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            interactive_configuration
        else
            exit 1
        fi
    fi
}

# ÊúÄÂ∞èÈÖçÁΩÆ
minimal_configuration() {
    log_step "ÂàõÂª∫ÊúÄÂ∞èÈÖçÁΩÆÊñá‰ª∂..."
    
    cat > config.ini << 'EOF'
[telegram]
# ËØ∑Â°´ÂÖ•ÊÇ®ÁöÑÊú∫Âô®‰∫∫Token
submission_bot_token = YOUR_SUBMISSION_BOT_TOKEN
publish_bot_token = YOUR_PUBLISH_BOT_TOKEN
admin_bot_token = YOUR_ADMIN_BOT_TOKEN

# ËØ∑Â°´ÂÖ•È¢ëÈÅìÂíåÁæ§ÁªÑID (Ë¥üÊï∞)
channel_id = YOUR_CHANNEL_ID
admin_group_id = YOUR_ADMIN_GROUP_ID
review_group_id = YOUR_REVIEW_GROUP_ID

# ËØ∑Â°´ÂÖ•ÁÆ°ÁêÜÂëòÁî®Êà∑ID (Ê≠£Êï∞ÔºåÁî®ÈÄóÂè∑ÂàÜÈöî)
admin_users = YOUR_ADMIN_USER_ID

[database]
db_file = telegram_bot.db

[settings]
require_approval = true
auto_publish_delay = 0
max_file_size = 50
ad_enabled = false
max_ads_per_post = 0
show_ad_label = false
enable_ocr = false
enable_image_compress = false
enable_video_thumbnail = true
db_pool_size = 10
cache_enabled = true
async_workers = 5
default_language = zh-CN
default_timezone = Asia/Shanghai

[performance]
db_pool_size = 10
db_max_overflow = 5
async_max_workers = 5
async_queue_size = 1000
cache_max_size = 1000
cache_default_ttl = 3600
max_file_size = 50
enable_compression = false

[media]
image_quality = medium
max_image_size = 2048
enable_ocr = false
ocr_languages = chi_sim+eng
enable_video_thumbnail = true
thumbnail_time = 1.0
max_video_size = 100
enable_audio_metadata = true

[advertisement]
enabled = false
max_ads_per_post = 0
min_ads_per_post = 0
show_ad_label = false
ad_separator = "\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
random_selection = true
track_clicks = true
EOF
    
    log_warning "Â∑≤ÂàõÂª∫ÊúÄÂ∞èÈÖçÁΩÆÊñá‰ª∂ÔºåËØ∑ÊâãÂä®ÁºñËæë config.ini Â°´ÂÖ•ÂÆûÈôÖÂÄº"
    log_info "ÈÖçÁΩÆÂÆåÊàêÂêéËØ∑ÈáçÊñ∞ËøêË°åÂÆâË£ÖËÑöÊú¨È™åËØÅÈÖçÁΩÆ"
    
    echo -e "${YELLOW}ÂøÖÈ°ªÈÖçÁΩÆÁöÑÈ°πÁõÆ:${NC}"
    echo "‚Ä¢ submission_bot_token"
    echo "‚Ä¢ publish_bot_token"
    echo "‚Ä¢ admin_bot_token"
    echo "‚Ä¢ channel_id"
    echo "‚Ä¢ admin_group_id"
    echo "‚Ä¢ review_group_id"
    echo "‚Ä¢ admin_users"
    
    read -p "ÊòØÂê¶Áé∞Âú®ÁºñËæëÈÖçÁΩÆÊñá‰ª∂? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        ${EDITOR:-nano} config.ini
    fi
}

# ÊòæÁ§∫ÈÖçÁΩÆÁ§∫‰æã
show_configuration_example() {
    log_header "üìã ÈÖçÁΩÆÊñá‰ª∂Á§∫‰æã"
    
    echo -e "${CYAN}config.ini ÈÖçÁΩÆÁ§∫‰æã:${NC}"
    echo
    cat << 'EOF'
[telegram]
# Êú∫Âô®‰∫∫Token (‰ªé@BotFatherËé∑Âèñ)
submission_bot_token = 1234567890:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
publish_bot_token = 1234567890:BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
admin_bot_token = 1234567890:CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

# È¢ëÈÅìÂíåÁæ§ÁªÑID (Ë¥üÊï∞Ôºå‰ªé@userinfobotËé∑Âèñ)
channel_id = -1001234567890
admin_group_id = -1001234567891
review_group_id = -1001234567892

# ÁÆ°ÁêÜÂëòÁî®Êà∑ID (Ê≠£Êï∞ÔºåÂ§ö‰∏™Áî®ÈÄóÂè∑ÂàÜÈöî)
admin_users = 123456789,987654321

[database]
db_file = telegram_bot.db

[settings]
# Âü∫Á°ÄËÆæÁΩÆ
require_approval = true
auto_publish_delay = 0
max_file_size = 50

# ÂπøÂëäËÆæÁΩÆ
ad_enabled = true
max_ads_per_post = 3
show_ad_label = true

# Â§öÂ™í‰ΩìËÆæÁΩÆ
enable_ocr = true
enable_image_compress = true
enable_video_thumbnail = true

# ÊÄßËÉΩËÆæÁΩÆ
db_pool_size = 10
cache_enabled = true
async_workers = 5

# Â§öËØ≠Ë®ÄËÆæÁΩÆ
default_language = zh-CN
default_timezone = Asia/Shanghai
EOF
    
    echo
    read -p "ÊåâÂõûËΩ¶ÈîÆËøîÂõûÈÖçÁΩÆÈÄâÊã©: "
    show_configuration_guide
}

# ÈÖçÁΩÆÊú∫Âô®‰∫∫ (‰∏ªÂÖ•Âè£ÂáΩÊï∞)
configure_bots() {
    log_header "‚öôÔ∏è ÈÖçÁΩÆÊú∫Âô®‰∫∫Á≥ªÁªü"
    show_configuration_guide
}

# È™åËØÅÈÖçÁΩÆ
validate_config() {
    log_header "‚úÖ È™åËØÅÈÖçÁΩÆ"
    
    # ÊøÄÊ¥ªËôöÊãüÁéØÂ¢É
    source venv/bin/activate
    
    # Ê£ÄÊü•ÈÖçÁΩÆÊñá‰ª∂ÊòØÂê¶Â≠òÂú®
    if [[ ! -f "config.ini" ]]; then
        log_error "ÈÖçÁΩÆÊñá‰ª∂ config.ini ‰∏çÂ≠òÂú®"
        exit 1
    fi
    
    log_step "È™åËØÅÈÖçÁΩÆÊñá‰ª∂Ê†ºÂºè..."
    if python -c "
import configparser
config = configparser.ConfigParser()
config.read('config.ini')
required_sections = ['telegram', 'database', 'settings']
for section in required_sections:
    if not config.has_section(section):
        raise Exception(f'Missing section: {section}')
print('ÈÖçÁΩÆÊñá‰ª∂Ê†ºÂºèÊ≠£Á°Æ')
" 2>/dev/null; then
        log_success "ÈÖçÁΩÆÊñá‰ª∂Ê†ºÂºèÈ™åËØÅÈÄöËøá"
    else
        log_error "ÈÖçÁΩÆÊñá‰ª∂Ê†ºÂºèÈîôËØØ"
        log_error "ËØ∑Ê£ÄÊü•config.iniÊñá‰ª∂Ê†ºÂºè"
        exit 1
    fi
    
    log_step "È™åËØÅÂøÖÈúÄÈÖçÁΩÆÈ°π..."
    local config_check=$(python -c "
import configparser
config = configparser.ConfigParser()
config.read('config.ini')

required_items = {
    'telegram': ['submission_bot_token', 'publish_bot_token', 'admin_bot_token', 
                 'channel_id', 'admin_group_id', 'review_group_id', 'admin_users'],
    'database': ['db_file']
}

missing = []
for section, items in required_items.items():
    for item in items:
        if not config.has_option(section, item) or not config.get(section, item).strip():
            missing.append(f'{section}.{item}')

if missing:
    print('MISSING:' + ','.join(missing))
else:
    print('OK')
" 2>/dev/null)
    
    if [[ $config_check == "OK" ]]; then
        log_success "ÂøÖÈúÄÈÖçÁΩÆÈ°πÈ™åËØÅÈÄöËøá"
    else
        local missing_items=$(echo $config_check | cut -d':' -f2)
        log_error "Áº∫Â∞ëÂøÖÈúÄÈÖçÁΩÆÈ°π: $missing_items"
        exit 1
    fi
    
    log_step "ÊµãËØïÊú∫Âô®‰∫∫TokenËøûÊé•..."
    
    # ËØªÂèñÊâÄÊúâToken
    local tokens=$(python -c "
import configparser
config = configparser.ConfigParser()
config.read('config.ini')
print(config.get('telegram', 'submission_bot_token'))
print(config.get('telegram', 'publish_bot_token'))
print(config.get('telegram', 'admin_bot_token'))
")
    
    local token_array=($tokens)
    local token_names=("ÊäïÁ®øÊú∫Âô®‰∫∫" "ÂèëÂ∏ÉÊú∫Âô®‰∫∫" "ÊéßÂà∂Êú∫Âô®‰∫∫")
    
    # È™åËØÅÊØè‰∏™Token
    for i in {0..2}; do
        local token=${token_array[$i]}
        local name=${token_names[$i]}
        
        if validate_token "$token" "$name"; then
            continue
        else
            log_error "$name TokenÈ™åËØÅÂ§±Ë¥•"
            exit 1
        fi
    done
    
    log_step "È™åËØÅIDÊ†ºÂºè..."
    local id_check=$(python -c "
import configparser
config = configparser.ConfigParser()
config.read('config.ini')

# Ê£ÄÊü•È¢ëÈÅì/Áæ§ÁªÑID (Â∫îËØ•ÊòØË¥üÊï∞)
channel_id = config.get('telegram', 'channel_id')
admin_group_id = config.get('telegram', 'admin_group_id')
review_group_id = config.get('telegram', 'review_group_id')

if not (channel_id.startswith('-') and channel_id[1:].isdigit()):
    print(f'Invalid channel_id: {channel_id}')
    exit(1)

if not (admin_group_id.startswith('-') and admin_group_id[1:].isdigit()):
    print(f'Invalid admin_group_id: {admin_group_id}')
    exit(1)

if not (review_group_id.startswith('-') and review_group_id[1:].isdigit()):
    print(f'Invalid review_group_id: {review_group_id}')
    exit(1)

# Ê£ÄÊü•ÁÆ°ÁêÜÂëòID (Â∫îËØ•ÊòØÊ≠£Êï∞)
admin_users = config.get('telegram', 'admin_users')
for user_id in admin_users.split(','):
    user_id = user_id.strip()
    if not user_id.isdigit():
        print(f'Invalid admin_user_id: {user_id}')
        exit(1)

print('IDÊ†ºÂºèÈ™åËØÅÈÄöËøá')
")
    
    if [[ $? -eq 0 ]]; then
        log_success "$id_check"
    else
        log_error "IDÊ†ºÂºèÈ™åËØÅÂ§±Ë¥•: $id_check"
        exit 1
    fi
    
    log_success "ÈÖçÁΩÆÈ™åËØÅÂÆåÊàê"
}

# ÂàùÂßãÂåñÊï∞ÊçÆÂ∫ì
init_database() {
    log_header "üóÑÔ∏è ÂàùÂßãÂåñÊï∞ÊçÆÂ∫ì"
    
    source venv/bin/activate
    
    log_info "ÂàùÂßãÂåñÊï∞ÊçÆÂ∫ìË°®..."
    
    # ËøêË°åÊï∞ÊçÆÂ∫ìÂàùÂßãÂåñ
    python3 -c "
from database import DatabaseManager
from advertisement_manager import initialize_ad_manager
from performance_optimizer import initialize_optimizer
from i18n_manager import initialize_locale_manager
from real_time_notification import initialize_notification_manager

# ÂàùÂßãÂåñÊï∞ÊçÆÂ∫ì
db = DatabaseManager('telegram_bot.db')
print('Êï∞ÊçÆÂ∫ìÂàùÂßãÂåñÂÆåÊàê')

# ÂàùÂßãÂåñÂêÑ‰∏™Ê®°Âùó
try:
    initialize_ad_manager('telegram_bot.db')
    print('ÂπøÂëäÁÆ°ÁêÜÊ®°ÂùóÂàùÂßãÂåñÂÆåÊàê')
except Exception as e:
    print(f'ÂπøÂëäÁÆ°ÁêÜÊ®°ÂùóÂàùÂßãÂåñÂ§±Ë¥•: {e}')

try:
    initialize_optimizer('telegram_bot.db')
    print('ÊÄßËÉΩ‰ºòÂåñÊ®°ÂùóÂàùÂßãÂåñÂÆåÊàê')
except Exception as e:
    print(f'ÊÄßËÉΩ‰ºòÂåñÊ®°ÂùóÂàùÂßãÂåñÂ§±Ë¥•: {e}')

try:
    initialize_locale_manager()
    print('Â§öËØ≠Ë®ÄÊ®°ÂùóÂàùÂßãÂåñÂÆåÊàê')
except Exception as e:
    print(f'Â§öËØ≠Ë®ÄÊ®°ÂùóÂàùÂßãÂåñÂ§±Ë¥•: {e}')

try:
    # ËØªÂèñÈÖçÁΩÆËé∑ÂèñToken
    import configparser
    config = configparser.ConfigParser()
    config.read('config.ini')
    token = config.get('telegram', 'admin_bot_token')
    initialize_notification_manager(token)
    print('ÂÆûÊó∂ÈÄöÁü•Ê®°ÂùóÂàùÂßãÂåñÂÆåÊàê')
except Exception as e:
    print(f'ÂÆûÊó∂ÈÄöÁü•Ê®°ÂùóÂàùÂßãÂåñÂ§±Ë¥•: {e}')
"
    
    log_success "Êï∞ÊçÆÂ∫ìÂàùÂßãÂåñÂÆåÊàê"
}

# ËÆæÁΩÆÊñá‰ª∂ÊùÉÈôê
setup_permissions() {
    log_header "üîê ËÆæÁΩÆÊñá‰ª∂ÊùÉÈôê"
    
    # ËÑöÊú¨Êñá‰ª∂ÂèØÊâßË°å
    chmod +x *.sh
    log_info "ËÑöÊú¨Êñá‰ª∂ÊùÉÈôêËÆæÁΩÆÂÆåÊàê"
    
    # PythonÊñá‰ª∂Âè™ËØª
    chmod 644 *.py
    log_info "PythonÊñá‰ª∂ÊùÉÈôêËÆæÁΩÆÂÆåÊàê"
    
    # ÈÖçÁΩÆÊñá‰ª∂‰ªÖÁî®Êà∑ÂèØËØª
    chmod 600 config.ini
    log_info "ÈÖçÁΩÆÊñá‰ª∂ÊùÉÈôêËÆæÁΩÆÂÆåÊàê"
    
    # Êó•ÂøóÁõÆÂΩï
    mkdir -p logs
    chmod 755 logs
    log_info "Êó•ÂøóÁõÆÂΩïÊùÉÈôêËÆæÁΩÆÂÆåÊàê"
    
    log_success "Êñá‰ª∂ÊùÉÈôêËÆæÁΩÆÂÆåÊàê"
}

# ÊµãËØïÁ≥ªÁªü
test_system() {
    log_header "üß™ ÊµãËØïÁ≥ªÁªüÂäüËÉΩ"
    
    source venv/bin/activate
    
    echo -e "${CYAN}Ê≠£Âú®ÂêØÂä®ÊµãËØï...${NC}"
    echo -e "${YELLOW}ËøôÂ∞ÜÂêØÂä®ÊâÄÊúâÊú∫Âô®‰∫∫ËøõË°åÂäüËÉΩÊµãËØï${NC}"
    echo -e "${YELLOW}ÊµãËØïÂ∞ÜÂú®30ÁßíÂêéËá™Âä®ÂÅúÊ≠¢${NC}"
    echo
    
    read -p "ÊòØÂê¶ÂºÄÂßãÂäüËÉΩÊµãËØï? (y/n): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "Ë∑≥ËøáÂäüËÉΩÊµãËØï"
        return
    fi
    
    # ÂêØÂä®Êú∫Âô®‰∫∫
    log_info "ÂêØÂä®Êú∫Âô®‰∫∫ËøõË°åÊµãËØï..."
    
    # ÂêéÂè∞ÂêØÂä®
    python3 submission_bot.py > logs/submission_test.log 2>&1 &
    SUBMISSION_PID=$!
    
    python3 publish_bot.py > logs/publish_test.log 2>&1 &
    PUBLISH_PID=$!
    
    python3 control_bot.py > logs/control_test.log 2>&1 &
    CONTROL_PID=$!
    
    log_info "Êú∫Âô®‰∫∫Â∑≤ÂêØÂä®ÔºåËøõÁ®ãID: $SUBMISSION_PID, $PUBLISH_PID, $CONTROL_PID"
    
    # Á≠âÂæÖÂêØÂä®
    sleep 5
    
    # Ê£ÄÊü•ËøõÁ®ã
    TEST_PASSED=true
    
    for pid in $SUBMISSION_PID $PUBLISH_PID $CONTROL_PID; do
        if kill -0 $pid 2>/dev/null; then
            log_success "ËøõÁ®ã $pid ËøêË°åÊ≠£Â∏∏"
        else
            log_error "ËøõÁ®ã $pid ÂêØÂä®Â§±Ë¥•"
            TEST_PASSED=false
        fi
    done
    
    # Á≠âÂæÖÊµãËØïÊó∂Èó¥
    if $TEST_PASSED; then
        log_info "ÊµãËØïËøêË°å‰∏≠ÔºåÁ≠âÂæÖ30Áßí..."
        for i in {30..1}; do
            echo -ne "\r${YELLOW}Ââ©‰ΩôÊó∂Èó¥: ${i}Áßí${NC} "
            sleep 1
        done
        echo
    fi
    
    # ÂÅúÊ≠¢ÊµãËØï
    log_info "ÂÅúÊ≠¢ÊµãËØïËøõÁ®ã..."
    for pid in $SUBMISSION_PID $PUBLISH_PID $CONTROL_PID; do
        if kill -0 $pid 2>/dev/null; then
            kill $pid
            log_info "Â∑≤ÂÅúÊ≠¢ËøõÁ®ã $pid"
        fi
    done
    
    sleep 2
    
    # Ê£ÄÊü•Êó•Âøó
    log_info "Ê£ÄÊü•ÊµãËØïÊó•Âøó..."
    
    if grep -q "ERROR" logs/*.log 2>/dev/null; then
        log_warning "Âú®Êó•Âøó‰∏≠ÂèëÁé∞ÈîôËØØÔºåËØ∑Ê£ÄÊü•:"
        grep "ERROR" logs/*.log | head -5
        TEST_PASSED=false
    fi
    
    if $TEST_PASSED; then
        log_success "Á≥ªÁªüÂäüËÉΩÊµãËØïÈÄöËøá"
    else
        log_warning "Á≥ªÁªüÊµãËØïÂèëÁé∞ÈóÆÈ¢òÔºåËØ∑Ê£ÄÊü•Êó•ÂøóÊñá‰ª∂"
        log_info "Êó•ÂøóÊñá‰ª∂‰ΩçÁΩÆ: ./logs/"
    fi
}

# ÂàõÂª∫Á≥ªÁªüÊúçÂä°
setup_systemd() {
    log_header "üîß ËÆæÁΩÆÁ≥ªÁªüÊúçÂä° (ÂèØÈÄâ)"
    
    echo -e "${CYAN}ÊòØÂê¶Ë¶ÅÂàõÂª∫systemdÊúçÂä°‰ª•‰æøÂºÄÊú∫Ëá™ÂêØÂä®?${NC}"
    echo -e "${YELLOW}ËøôÂ∞ÜÂÖÅËÆ∏Êú∫Âô®‰∫∫Âú®Á≥ªÁªüÈáçÂêØÂêéËá™Âä®ÂêØÂä®${NC}"
    echo
    
    read -p "ÂàõÂª∫systemdÊúçÂä°? (y/n): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "Ë∑≥ËøásystemdÊúçÂä°ÂàõÂª∫"
        return
    fi
    
    CURRENT_USER=$(whoami)
    CURRENT_DIR=$(pwd)
    
    # ÂàõÂª∫ÊúçÂä°Êñá‰ª∂
    log_info "ÂàõÂª∫systemdÊúçÂä°Êñá‰ª∂..."
    
    sudo tee /etc/systemd/system/telegram-bots.service > /dev/null << EOF
[Unit]
Description=Telegram Bot Submission System
After=network.target
Wants=network.target

[Service]
Type=forking
User=$CURRENT_USER
Group=$CURRENT_USER
WorkingDirectory=$CURRENT_DIR
ExecStart=$CURRENT_DIR/start_all.sh
ExecStop=$CURRENT_DIR/stop_all.sh
ExecReload=$CURRENT_DIR/restart_all.sh
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF
    
    # ÈáçËΩΩsystemd
    sudo systemctl daemon-reload
    
    # ÂêØÁî®ÊúçÂä°
    sudo systemctl enable telegram-bots.service
    
    log_success "systemdÊúçÂä°ÂàõÂª∫ÂÆåÊàê"
    log_info "ÊúçÂä°ÁÆ°ÁêÜÂëΩ‰ª§:"
    echo "  ÂêØÂä®: sudo systemctl start telegram-bots"
    echo "  ÂÅúÊ≠¢: sudo systemctl stop telegram-bots"
    echo "  ÈáçÂêØ: sudo systemctl restart telegram-bots"
    echo "  Áä∂ÊÄÅ: sudo systemctl status telegram-bots"
    echo "  Êó•Âøó: sudo journalctl -u telegram-bots -f"
}

# ÂàõÂª∫‰ΩøÁî®ÊåáÂçó
create_usage_guide() {
    log_header "üìñ ÂàõÂª∫‰ΩøÁî®ÊåáÂçó"
    
    cat > USAGE_GUIDE.md << 'EOF'
# üöÄ Âø´ÈÄü‰ΩøÁî®ÊåáÂçó

## ÂêØÂä®Á≥ªÁªü

```bash
# ÂêØÂä®ÊâÄÊúâÊú∫Âô®‰∫∫
./start_all.sh

# Ê£ÄÊü•ËøêË°åÁä∂ÊÄÅ  
./status.sh

# Êü•ÁúãÊó•Âøó
tail -f *.log
```

## Âü∫Êú¨‰ΩøÁî®

### 1. ÊäïÁ®øÊú∫Âô®‰∫∫
- Áî®Êà∑ÂêëÊäïÁ®øÊú∫Âô®‰∫∫ÂèëÈÄÅ‰ªªÊÑèÂÜÖÂÆπ
- ÊîØÊåÅÊñáÂ≠ó„ÄÅÂõæÁâá„ÄÅËßÜÈ¢ë„ÄÅÈü≥È¢ë„ÄÅÊñáÊ°£Á≠â
- Ëá™Âä®ËΩ¨ÂèëÂà∞ÂÆ°Ê†∏Áæ§ÁªÑ

### 2. ÂÆ°Ê†∏Áæ§ÁªÑ  
- ÁÆ°ÁêÜÂëòÂú®ÂÆ°Ê†∏Áæ§ÁªÑ‰∏≠ÂÆ°Ê†∏ÊäïÁ®ø
- ÁÇπÂáª ‚úÖ ÈÄöËøáÊäïÁ®ø
- ÁÇπÂáª ‚ùå ÊãíÁªùÊäïÁ®ø
- ÁÇπÂáª üë§ Êü•ÁúãÁî®Êà∑ÁªüËÆ°
- ÁÇπÂáª üö´ Â∞ÅÁ¶ÅÁî®Êà∑

### 3. ÊéßÂà∂Êú∫Âô®‰∫∫
- ÂèëÈÄÅ `/start` ÊâìÂºÄÊéßÂà∂Èù¢Êùø
- ÁÆ°ÁêÜÊú∫Âô®‰∫∫Áä∂ÊÄÅ
- Êü•ÁúãÁ≥ªÁªü‰ø°ÊÅØ
- ÁÆ°ÁêÜÂπøÂëäÁ≥ªÁªü

## ÂπøÂëäÁÆ°ÁêÜ

### ÂàõÂª∫ÂπøÂëä
```bash
# ÊñáÊú¨ÂπøÂëä
/create_ad text Ê¨¢ËøéÂπøÂëä
üéâ Ê¨¢ËøéÊù•Âà∞Êàë‰ª¨ÁöÑÈ¢ëÈÅìÔºÅ

# ÈìæÊé•ÂπøÂëä  
/create_ad link ÂÆòÁΩë https://example.com
üåê ËÆøÈóÆÊàë‰ª¨ÁöÑÂÆòÊñπÁΩëÁ´ô

# ÊåâÈíÆÂπøÂëä
/create_ad button Ê¥ªÂä® https://sale.com Á´ãÂç≥ÂèÇ‰∏é
üî• ÈôêÊó∂ÁâπÊÉ†Ê¥ªÂä®ÔºÅ
```

### ÁÆ°ÁêÜÂπøÂëä
- ‰ΩøÁî® `/ads` ÂëΩ‰ª§ÊâìÂºÄÂπøÂëäÁÆ°ÁêÜÈù¢Êùø
- ÂèØ‰ª•ÂêØÁî®/Á¶ÅÁî®„ÄÅÁºñËæë„ÄÅÂà†Èô§ÂπøÂëä
- Êü•ÁúãÂπøÂëäÁªüËÆ°ÂíåÊïàÊûú

## Á≥ªÁªüÁÆ°ÁêÜ

### Êó•Â∏∏Áª¥Êä§
```bash
# Êü•ÁúãÁ≥ªÁªüÁä∂ÊÄÅ
./status.sh

# ÈáçÂêØÊâÄÊúâÊú∫Âô®‰∫∫
./restart_all.sh  

# Êü•ÁúãÊó•Âøó
tail -f submission_bot.log
tail -f publish_bot.log
tail -f control_bot.log

# Â§á‰ªΩÊï∞ÊçÆÂ∫ì
cp telegram_bot.db backup_$(date +%Y%m%d).db
```

### Êõ¥Êñ∞Á≥ªÁªü
```bash
# ÊãâÂèñÊúÄÊñ∞‰ª£Á†Å
git pull

# Êõ¥Êñ∞‰æùËµñ
source venv/bin/activate
pip install -r requirements.txt --upgrade

# ÈáçÂêØÁ≥ªÁªü
./stop_all.sh
./start_all.sh
```

## ÊïÖÈöúÊéíÈô§

### Êú∫Âô®‰∫∫Êó†ÂìçÂ∫î
1. Ê£ÄÊü•ËøõÁ®ã: `ps aux | grep python`
2. Êü•ÁúãÊó•Âøó: `tail -n 50 *.log`
3. ÈáçÂêØÊú∫Âô®‰∫∫: `./restart_all.sh`

### ÈÖçÁΩÆÈóÆÈ¢ò
1. Ê£ÄÊü•config.iniÊ†ºÂºè
2. È™åËØÅTokenÊúâÊïàÊÄß
3. Á°ÆËÆ§È¢ëÈÅì/Áæ§ÁªÑIDÊ≠£Á°Æ

### ÊùÉÈôêÈóÆÈ¢ò
1. Á°ÆËÆ§Êú∫Âô®‰∫∫ÊòØÁæ§ÁªÑÁÆ°ÁêÜÂëò
2. Ê£ÄÊü•Êñá‰ª∂ÊùÉÈôê: `ls -la`
3. ÈáçËÆæÊùÉÈôê: `chmod +x *.sh`

## È´òÁ∫ßÂäüËÉΩ

### Â§öËØ≠Ë®ÄËÆæÁΩÆ
- Áî®Êà∑ÂèØ‰ª•ËÆæÁΩÆ‰∏™‰∫∫ËØ≠Ë®ÄÂÅèÂ•Ω
- ÊîØÊåÅ‰∏≠Êñá„ÄÅËã±ËØ≠„ÄÅÊó•ËØ≠„ÄÅÈü©ËØ≠Á≠â12ÁßçËØ≠Ë®Ä
- Ëá™Âä®Êó∂Âå∫ËΩ¨Êç¢

### ÊÄßËÉΩÁõëÊéß
- Êü•ÁúãÊï∞ÊçÆÂ∫ìÊÄßËÉΩ
- ÁõëÊéßÂÜÖÂ≠ò‰ΩøÁî®
- ÂºÇÊ≠•‰ªªÂä°ÈòüÂàóÁä∂ÊÄÅ

### ÂÆûÊó∂ÈÄöÁü•
- Á≥ªÁªüÁä∂ÊÄÅÂèòÂåñÈÄöÁü•
- ÈîôËØØÂëäË≠¶ÈÄöÁü•
- ÁÆ°ÁêÜÂëòÊìç‰ΩúÈÄöÁü•

---

Â¶ÇÈúÄÊõ¥Â§öÂ∏ÆÂä©ÔºåËØ∑Êü•Áúã README.md ÊàñËÅîÁ≥ªÊäÄÊúØÊîØÊåÅ„ÄÇ
EOF
    
    log_success "‰ΩøÁî®ÊåáÂçóÂàõÂª∫ÂÆåÊàê: USAGE_GUIDE.md"
}

# ÊòæÁ§∫ÂÆåÊàê‰ø°ÊÅØ
show_completion() {
    log_header "üéâ ÂÆâË£ÖÂÆåÊàê"
    
    echo -e "${GREEN}"
    cat << 'EOF'
   ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
   ‚ïë                                                           ‚ïë
   ‚ïë         ü§ñ ÁîµÊä•Êú∫Âô®‰∫∫ÊäïÁ®øÁ≥ªÁªüÂÆâË£ÖÂÆåÊàêÔºÅ                    ‚ïë  
   ‚ïë                                                           ‚ïë
   ‚ïë    ÊÇ®Áé∞Âú®Êã•Êúâ‰∫Ü‰∏Ä‰∏™ÂäüËÉΩÂÆåÊï¥ÁöÑ‰ºÅ‰∏öÁ∫ßTelegramÊú∫Âô®‰∫∫Á≥ªÁªü     ‚ïë
   ‚ïë                                                           ‚ïë
   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
    
    echo -e "${CYAN}üìã ÂÆâË£ÖÊÄªÁªì:${NC}"
    echo "‚úÖ Á≥ªÁªü‰æùËµñÂÆâË£ÖÂÆåÊàê"
    echo "‚úÖ PythonÁéØÂ¢ÉÈÖçÁΩÆÂÆåÊàê"  
    echo "‚úÖ Êú∫Âô®‰∫∫ÈÖçÁΩÆÂÆåÊàê"
    echo "‚úÖ Êï∞ÊçÆÂ∫ìÂàùÂßãÂåñÂÆåÊàê"
    echo "‚úÖ Êñá‰ª∂ÊùÉÈôêËÆæÁΩÆÂÆåÊàê"
    echo "‚úÖ Á≥ªÁªüÂäüËÉΩÈ™åËØÅÂÆåÊàê"
    
    echo -e "\n${CYAN}üöÄ Âø´ÈÄüÂºÄÂßã:${NC}"
    echo -e "${WHITE}1. ÂêØÂä®Á≥ªÁªü:${NC}     ./start_all.sh"
    echo -e "${WHITE}2. Ê£ÄÊü•Áä∂ÊÄÅ:${NC}     ./status.sh"  
    echo -e "${WHITE}3. Êü•ÁúãÊó•Âøó:${NC}     tail -f *.log"
    echo -e "${WHITE}4. ÂÅúÊ≠¢Á≥ªÁªü:${NC}     ./stop_all.sh"
    
    echo -e "\n${CYAN}üìñ ÊñáÊ°£ÂíåÊåáÂçó:${NC}"
    echo -e "${WHITE}‚Ä¢ ËØ¶ÁªÜÊñáÊ°£:${NC}      README.md"
    echo -e "${WHITE}‚Ä¢ ‰ΩøÁî®ÊåáÂçó:${NC}      USAGE_GUIDE.md"
    echo -e "${WHITE}‚Ä¢ ÈÖçÁΩÆÊñá‰ª∂:${NC}      config.ini"
    
    echo -e "\n${CYAN}üéõÔ∏è ÁÆ°ÁêÜÁïåÈù¢:${NC}"
    echo -e "${WHITE}‚Ä¢ ÊéßÂà∂Êú∫Âô®‰∫∫:${NC}    ÂèëÈÄÅ /start Âà∞ÊéßÂà∂Êú∫Âô®‰∫∫"
    echo -e "${WHITE}‚Ä¢ ÂπøÂëäÁÆ°ÁêÜ:${NC}      ÂèëÈÄÅ /ads Âà∞ÊéßÂà∂Êú∫Âô®‰∫∫"
    echo -e "${WHITE}‚Ä¢ Á≥ªÁªüÁõëÊéß:${NC}      ÊéßÂà∂Èù¢Êùø‰∏≠ÁöÑÁ≥ªÁªü‰ø°ÊÅØ"
    
    echo -e "\n${CYAN}üîß Á≥ªÁªüÁÆ°ÁêÜ:${NC}"
    if systemctl is-enabled telegram-bots.service >/dev/null 2>&1; then
        echo -e "${WHITE}‚Ä¢ ÊúçÂä°ÁÆ°ÁêÜ:${NC}      sudo systemctl [start|stop|restart] telegram-bots"
        echo -e "${WHITE}‚Ä¢ ÂºÄÊú∫Ëá™ÂêØ:${NC}      Â∑≤ÂêØÁî®"
    else
        echo -e "${WHITE}‚Ä¢ ÊâãÂä®ÁÆ°ÁêÜ:${NC}      ‰ΩøÁî® ./start_all.sh Âíå ./stop_all.sh"
    fi
    
    echo -e "\n${YELLOW}‚ö†Ô∏è ÈáçË¶ÅÊèêÈÜí:${NC}"
    echo "‚Ä¢ ËØ∑Â¶•ÂñÑ‰øùÁÆ° config.ini Êñá‰ª∂‰∏≠ÁöÑToken‰ø°ÊÅØ"
    echo "‚Ä¢ ÂÆöÊúüÂ§á‰ªΩÊï∞ÊçÆÂ∫ìÊñá‰ª∂ telegram_bot.db"  
    echo "‚Ä¢ Âª∫ËÆÆÂÆöÊúüÊü•ÁúãÊó•ÂøóÊñá‰ª∂Ê£ÄÊü•Á≥ªÁªüËøêË°åÁä∂ÊÄÅ"
    echo "‚Ä¢ È¶ñÊ¨°‰ΩøÁî®ÂâçËØ∑ÈòÖËØª USAGE_GUIDE.md"
    
    echo -e "\n${CYAN}üìû ÊäÄÊúØÊîØÊåÅ:${NC}"
    echo "‚Ä¢ ÈÅáÂà∞ÈóÆÈ¢òËØ∑Êü•ÁúãÊïÖÈöúÊéíÈô§Á´†ËäÇ"
    echo "‚Ä¢ ÂèØ‰ª•Âú®GitHubÊèê‰∫§IssueÂèçÈ¶àÈóÆÈ¢ò"
    echo "‚Ä¢ Âä†ÂÖ•ÊäÄÊúØ‰∫§ÊµÅÁæ§Ëé∑ÂèñÂÆûÊó∂Â∏ÆÂä©"
    
    echo -e "\n${GREEN}üéä ÊÑüË∞¢‰ΩøÁî®ÔºÅÁ•ùÊÇ®‰ΩøÁî®ÊÑâÂø´ÔºÅ${NC}"
    echo
}

# ÊòæÁ§∫ÂÆâË£ÖÊëòË¶Å
show_install_summary() {
    log_header "üìã ÂÆâË£ÖÊëòË¶Å"
    
    echo -e "${CYAN}Á≥ªÁªü‰ø°ÊÅØ:${NC}"
    echo "‚Ä¢ Êìç‰ΩúÁ≥ªÁªü: $DISTRO $DISTRO_VERSION"
    echo "‚Ä¢ Êû∂ÊûÑ: $ARCH"
    echo "‚Ä¢ Python: $PYTHON_CMD"
    echo "‚Ä¢ ÂåÖÁÆ°ÁêÜÂô®: $PKG_MANAGER"
    echo
    
    echo -e "${CYAN}ÂÆâË£Ö‰ΩçÁΩÆ:${NC}"
    echo "‚Ä¢ ÂÆâË£ÖÁõÆÂΩï: $INSTALL_DIR"
    echo "‚Ä¢ Êó•ÂøóÊñá‰ª∂: $INSTALL_LOG"
    echo "‚Ä¢ Â§á‰ªΩÁõÆÂΩï: $BACKUP_DIR"
    echo
    
    echo -e "${CYAN}È¢ÑËÆ°ÂÆâË£ÖÊó∂Èó¥:${NC}"
    echo "‚Ä¢ Á≥ªÁªü‰æùËµñ: 2-5 ÂàÜÈíü"
    echo "‚Ä¢ PythonÁéØÂ¢É: 3-8 ÂàÜÈíü"
    echo "‚Ä¢ ÈÖçÁΩÆÂíåÊµãËØï: 5-10 ÂàÜÈíü"
    echo "‚Ä¢ ÊÄªËÆ°: 10-25 ÂàÜÈíü"
    echo
}

# ÂÆâË£ÖÂâçÊ£ÄÊü•
pre_install_check() {
    log_header "üîç ÂÆâË£ÖÂâçÊ£ÄÊü•"
    
    # Ê£ÄÊü•ÁΩëÁªúËøûÊé•
    if ! ping -c 1 pypi.org >/dev/null 2>&1; then
        log_warning "Êó†Ê≥ïËøûÊé•Âà∞PyPIÔºåÂèØËÉΩÂΩ±ÂìçPythonÂåÖ‰∏ãËΩΩ"
        read -p "ÊòØÂê¶ÁªßÁª≠ÂÆâË£Ö? (y/n): " -n 1 -r
        echo
        [[ ! $REPLY =~ ^[Yy]$ ]] && exit 0
    fi
    
    # Ê£ÄÊü•Á£ÅÁõòÁ©∫Èó¥
    local required_space=1000000  # 1GB in KB
    local available_space=$(df . | awk 'NR==2 {print $4}')
    
    if (( available_space < required_space )); then
        log_warning "Á£ÅÁõòÁ©∫Èó¥ÂèØËÉΩ‰∏çË∂≥ÔºåÂª∫ËÆÆËá≥Â∞ë1GBÂèØÁî®Á©∫Èó¥"
        read -p "ÊòØÂê¶ÁªßÁª≠ÂÆâË£Ö? (y/n): " -n 1 -r
        echo  
        [[ ! $REPLY =~ ^[Yy]$ ]] && exit 0
    fi
    
    # Ê£ÄÊü•sudoÊùÉÈôê
    if ! sudo -n true 2>/dev/null; then
        log_info "ÂÆâË£ÖÈúÄË¶ÅsudoÊùÉÈôêÊù•ÂÆâË£ÖÁ≥ªÁªü‰æùËµñ"
        if ! sudo true; then
            log_error "Êó†Ê≥ïËé∑ÂèñsudoÊùÉÈôê"
            exit 1
        fi
    fi
    
    log_success "ÂÆâË£ÖÂâçÊ£ÄÊü•ÂÆåÊàê"
}

# ÂÆâË£ÖÂÆåÊàêÂêéÊìç‰Ωú
post_install_actions() {
    log_header "üéØ ÂÆâË£ÖÂÆåÊàê"
    
    # ÁîüÊàêÂÆâË£ÖÊä•Âëä
    cat > install_report.txt << EOF
Telegram Bot System Installation Report
======================================

Installation Date: $(date)
System: $DISTRO $DISTRO_VERSION ($ARCH)
Python: $($PYTHON_CMD --version)
Install Directory: $INSTALL_DIR

Installation Status: SUCCESS

Files Created:
- config.ini (configuration file)
- venv/ (Python virtual environment)
- logs/ (log directory)
- *.py (bot scripts)
- *.sh (management scripts)

Next Steps:
1. Start the system: ./start_all.sh
2. Check status: ./status.sh
3. View logs: tail -f *.log
4. Read documentation: README.md

For support, check:
- README.md for detailed documentation
- USAGE_GUIDE.md for quick start
- logs/ directory for troubleshooting
EOF
    
    log_info "ÂÆâË£ÖÊä•ÂëäÂ∑≤‰øùÂ≠òÂà∞ install_report.txt"
    
    # Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂
    log_step "Ê∏ÖÁêÜÂÆâË£Ö‰∏¥Êó∂Êñá‰ª∂..."
    find . -name "*.pyc" -delete 2>/dev/null || true
    find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
    
    # ËÆæÁΩÆÊúÄÁªàÊùÉÈôê
    log_step "ËÆæÁΩÆÊúÄÁªàÊñá‰ª∂ÊùÉÈôê..."
    chmod 600 config.ini 2>/dev/null || true
    chmod +x *.sh 2>/dev/null || true
    chmod 755 logs 2>/dev/null || true
    
    log_success "ÂÆâË£ÖÂêéÊìç‰ΩúÂÆåÊàê"
}

# ‰∏ªÂÆâË£ÖÊµÅÁ®ã
main() {
    # ÊòæÁ§∫Ê¨¢ËøéÁïåÈù¢
    clear
    echo -e "${PURPLE}"
    cat << 'EOF'
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                                              ‚ïë
    ‚ïë    ü§ñ ÁîµÊä•Êú∫Âô®‰∫∫ÊäïÁ®øÁ≥ªÁªü - ‰∏ÄÈîÆÂÆâË£ÖËÑöÊú¨ v2.1                 ‚ïë
    ‚ïë                                                              ‚ïë
    ‚ïë    ‚ú® Êñ∞ÁâàÊú¨ÁâπÊÄß:                                             ‚ïë
    ‚ïë    ‚Ä¢ üîç Êô∫ËÉΩÁ≥ªÁªüÊ£ÄÊµã      ‚Ä¢ üöÄ Â§öÂπ≥Âè∞ÊîØÊåÅ                    ‚ïë
    ‚ïë    ‚Ä¢ üì¶ Ëá™Âä®‰æùËµñÁÆ°ÁêÜ      ‚Ä¢ ‚öôÔ∏è  ‰∫§‰∫íÂºèÈÖçÁΩÆÂêëÂØº               ‚ïë
    ‚ïë    ‚Ä¢ üß™ Ëá™Âä®ÂäüËÉΩÊµãËØï      ‚Ä¢ üõ°Ô∏è  ÂÆåÊï¥ÈîôËØØÂ§ÑÁêÜ                ‚ïë
    ‚ïë    ‚Ä¢ üìä ÂÆâË£ÖËøõÂ∫¶ÁõëÊéß      ‚Ä¢ üîÑ Ëá™Âä®ÂõûÊªöÊú∫Âà∂                  ‚ïë
    ‚ïë                                                              ‚ïë
    ‚ïë    üéØ Ê†∏ÂøÉÂäüËÉΩ:                                               ‚ïë
    ‚ïë    ‚Ä¢ üìù Êô∫ËÉΩÊäïÁ®øÁÆ°ÁêÜ      ‚Ä¢ üì¢ ÂπøÂëäÁ≥ªÁªü                      ‚ïë
    ‚ïë    ‚Ä¢ üé® Â§öÂ™í‰ΩìÂ§ÑÁêÜ        ‚Ä¢ üåç Â§öËØ≠Ë®ÄÊîØÊåÅ                    ‚ïë
    ‚ïë    ‚Ä¢ üîî ÂÆûÊó∂ÈÄöÁü•          ‚Ä¢ ‚ö° ÊÄßËÉΩ‰ºòÂåñ                      ‚ïë
    ‚ïë    ‚Ä¢ üîÑ ÁÉ≠Êõ¥Êñ∞ÂäüËÉΩ        ‚Ä¢ üõ°Ô∏è  ÂÆâÂÖ®ÁÆ°ÁêÜ                    ‚ïë
    ‚ïë                                                              ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
    
    echo -e "${CYAN}üéâ Ê¨¢Ëøé‰ΩøÁî®ÁîµÊä•Êú∫Âô®‰∫∫ÊäïÁ®øÁ≥ªÁªü‰∏ÄÈîÆÂÆâË£ÖËÑöÊú¨ÔºÅ${NC}"
    echo -e "${YELLOW}üìã Êú¨ËÑöÊú¨Â∞Ü‰∏∫ÊÇ®Ëá™Âä®ÂÆåÊàêÁ≥ªÁªüÁöÑÂÆâË£Ö„ÄÅÈÖçÁΩÆÂíåÊµãËØï${NC}"
    echo
    
    # ÊòæÁ§∫ËÑöÊú¨‰ø°ÊÅØ
    echo -e "${WHITE}ËÑöÊú¨‰ø°ÊÅØ:${NC}"
    echo "‚Ä¢ ÁâàÊú¨: $SCRIPT_VERSION"
    echo "‚Ä¢ ÊîØÊåÅÂπ≥Âè∞: Ubuntu, CentOS, Debian, Arch LinuxÁ≠â"
    echo "‚Ä¢ PythonË¶ÅÊ±Ç: >= $MIN_PYTHON_VERSION"
    echo "‚Ä¢ È¢ÑËÆ°ËÄóÊó∂: 10-25 ÂàÜÈíü"
    echo
    
    # Á°ÆËÆ§ÂºÄÂßãÂÆâË£Ö
    echo -e "${CYAN}ÂáÜÂ§áÂºÄÂßãÂÆâË£Ö...${NC}"
    read -p "ÊåâÂõûËΩ¶ÈîÆÁªßÁª≠ÔºåÊàñÊåâ Ctrl+C ÂèñÊ∂à: "
    echo
    
    # ÊâßË°åÂÆâË£ÖÊµÅÁ®ã
    init_environment
    pre_install_check
    show_install_summary
    
    echo -e "${GREEN}üöÄ ÂºÄÂßãÂÆâË£ÖÊµÅÁ®ã...${NC}"
    echo
    
         # ‰∏ªË¶ÅÂÆâË£ÖÊ≠•È™§
     check_root
     detect_system
     install_system_deps
     check_python
     setup_venv
     install_python_deps
     configure_bots
     validate_config
    init_database
    setup_permissions
    test_system
    setup_systemd
    create_usage_guide
    post_install_actions
    show_completion
    
    # ËØ¢ÈóÆÊòØÂê¶Á´ãÂç≥ÂêØÂä®
    echo
    echo -e "${CYAN}üéØ ÂÆâË£ÖÂÆåÊàêÔºÅ${NC}"
    read -p "ÊòØÂê¶Á´ãÂç≥ÂêØÂä®Êú∫Âô®‰∫∫Á≥ªÁªü? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        log_info "Ê≠£Âú®ÂêØÂä®Êú∫Âô®‰∫∫Á≥ªÁªü..."
        if ./start_all.sh; then
            sleep 3
            ./status.sh
            echo
            echo -e "${GREEN}üéä Á≥ªÁªüÂêØÂä®ÊàêÂäüÔºÅÊÇ®ÂèØ‰ª•ÂºÄÂßã‰ΩøÁî®Êú∫Âô®‰∫∫‰∫ÜÔºÅ${NC}"
        else
            log_warning "Á≥ªÁªüÂêØÂä®Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•Êó•ÂøóÊñá‰ª∂"
        fi
    else
        log_info "Á≥ªÁªüÂ∑≤ÂáÜÂ§áÂ∞±Áª™ÔºåÊÇ®ÂèØ‰ª•ÈöèÊó∂‰ΩøÁî® ./start_all.sh ÂêØÂä®"
    fi
    
    echo
    echo -e "${PURPLE}üìû Â¶ÇÈúÄÂ∏ÆÂä©ÔºåËØ∑Êü•Áúã:${NC}"
    echo "‚Ä¢ README.md - ËØ¶ÁªÜÊñáÊ°£"
    echo "‚Ä¢ USAGE_GUIDE.md - Âø´ÈÄü‰ΩøÁî®ÊåáÂçó"
    echo "‚Ä¢ install_report.txt - ÂÆâË£ÖÊä•Âëä"
    echo "‚Ä¢ logs/ - Êó•ÂøóÊñá‰ª∂"
}

# ËøêË°å‰∏ªÁ®ãÂ∫è
main "$@"